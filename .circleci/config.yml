version: 2

jobs:
  build_macos:
    macos:
      xcode: "10.0.0"
    working_directory: ~/go/src/github.com/filecoin-project/go-filecoin
    resource_class: large
    steps:
      - run:
          name: Configure environment variables
          command: |
            echo 'export PATH="/usr/local/go/bin:${HOME}/.cargo/bin:${PATH}:${HOME}/go/bin"' >> $BASH_ENV
            echo 'export GOPATH="${HOME}/go"' >> $BASH_ENV
            echo 'export FILECOIN_PARAMETER_CACHE="${HOME}/filecoin-proof-parameters/"' >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
              - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - checkout
      - run:
          name: Update submodules
          command: git submodule update --init
      - run:
          command: git rev-parse @:./proofs/rust-proofs > /tmp/rust-proofs-checksum.txt
      - restore_cache:
          key: v5-go-deps-{{ arch }}-{{ checksum  "~/go/src/github.com/filecoin-project/go-filecoin/build/main.go" }}-{{ checksum "~/go/src/github.com/filecoin-project/go-filecoin/package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}

        # The second checkout ensures we have the most recent code since the
        # restore_cache step above can override the go-filecoin code with cached code
      - checkout

      # groth parameters are lazily generated by rust-proofs during seal
      - restore_cache:
          key: v0-proof-params-{{ arch }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}

      - run:
          name: Install go
          command: |
            curl -O https://dl.google.com/go/go1.11.darwin-amd64.pkg && \
            sudo installer -pkg go1.11.darwin-amd64.pkg -target /
      - run: go version
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run:
          name: Install dependencies
          command: go run ./build/*.go smartdeps
      - save_cache:
          key: v5-go-deps-{{ arch }}-{{ checksum  "~/go/src/github.com/filecoin-project/go-filecoin/build/main.go" }}-{{ checksum "~/go/src/github.com/filecoin-project/go-filecoin/package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "~/go/pkg"
            - "~/go/src/gx"
            - "~/go/src/github.com"
            - "~/go/src/golang.org"
            - "~/.rustup"
            - "~/.cargo"
      - run:
          name: Build
          command: go run ./build/*.go build

      # place the filecoin binary in PATH for IPTB
      - run:
          name: Install
          command: go run ./build/*.go install

      # rebuild as the previous "install" step will move the binary and some tests
      # still expect that it be in the repo dir
      - run:
          name: Build
          command: go run ./build/*.go build

      - run:
          name: Test
          command: go run ./build/*.go test

      # groth parameters are lazily generated by rust-proofs during seal
      - save_cache:
          key: v0-proof-params-{{ arch }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "~/filecoin-proof-parameters/"

      - run:
          name: Create macos bundle
          command: ./build-macos.sh && tar -zcvf filecoin.tar.gz filecoin
      - store_artifacts:
          path: "~/go/src/github.com/filecoin-project/go-filecoin/filecoin.tar.gz"
          destination: filecoin.tar.gz

  build_linux:
    docker:
      - image: circleci/golang:1.10

    working_directory: /go/src/github.com/filecoin-project/go-filecoin
    resource_class: xlarge
    steps:
      - run:
          name: Configure environment variables
          command: |
            echo 'export PATH="${HOME}/.cargo/bin:${PATH}"' >> $BASH_ENV
            echo 'export FILECOIN_PARAMETER_CACHE="${HOME}/filecoin-proof-parameters/"' >> $BASH_ENV

      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"

      # The first checkout ensures we have the files needed to restore the cache
      - checkout

      # Pull in all submodules (inc. rust-proofs)
      - run: git submodule update --init

      # Save the Git SHA of the rust-proofs submodule so that we can use it when creating a cache key
      - run: git rev-parse @:./proofs/rust-proofs > /tmp/rust-proofs-checksum.txt

      - restore_cache:
          keys:
            - v5-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
            - v5-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}

        # The second checkout ensures we have the most recent code since the
        # restore_cache step above can override the go-filecoin code with cached code
      - checkout

      # groth parameters are lazily generated by rust-proofs during seal
      - restore_cache:
          key: v0-proof-params-{{ arch }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}

      - run:
          name: Install Rust toolchain (for rust-proofs)
          command: |
            (sudo apt-get update && sudo apt-get install -y clang libssl-dev && which cargo && which rustc) || (curl https://sh.rustup.rs -sSf | sh -s -- -y)

      - run:
          name: Install Dependencies
          command: go run ./build/*.go smartdeps

      - save_cache:
          key: v5-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "/go/pkg"
            - "/go/src/gx"
            - "/go/src/github.com"
            - "/go/src/golang.org"
            - "/home/circleci/.rustup"
            - "/home/circleci/.cargo"

      - save_cache:
          key: v5-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "/go/pkg"
            - "/go/src/gx"
            - "/go/src/github.com"
            - "/go/src/golang.org"
            - "/home/circleci/.rustup"
            - "/home/circleci/.cargo"

      - run:
          name: Build
          command: go run ./build/*.go build

      # place the filecoin binary in PATH for IPTB
      - run:
          name: Install
          command: go run ./build/*.go install

      # rebuild as the previous "install" step will move the binary and some tests
      # still expect that it be in the repo dir
      - run:
          name: Build
          command: go run ./build/*.go build

      - run:
          name: Test
          command: |
            go run ./build/*.go test -covermode=atomic -coverprofile=coverage.txt &&
            bash <(curl -s https://codecov.io/bash)

      - run:
          name: Functional Tests
          command: ./functional-tests/retrieval

      # groth parameters are lazily generated by rust-proofs during seal
      - save_cache:
          key: v0-proof-params-{{ arch }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "/home/circleci/filecoin-proof-parameters/"

      - run:
          name: Lint
          command: go run ./build/*.go lint

      - run:
          name: Create linux bundle
          command: ./build-linux.sh && tar -zcvf filecoin.tar.gz filecoin
      - store_artifacts:
          path: "/go/src/github.com/filecoin-project/go-filecoin/filecoin.tar.gz"
          destination: filecoin.tar.gz

  build_docker_img:
    docker:
      - image: circleci/golang:latest

    resource_class: large
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install -y python-pip libyaml-dev python-dev jq
            sudo pip install awscli
      - run:
          name: login to ECR
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY
            eval $(aws --region us-east-1 ecr --no-include-email get-login)

      # The first checkout ensures we have the files needed to restore the cache
      - checkout

      # Pull in all submodules (inc. rust-proofs)
      - run: git submodule update --init

      - run:
          name: build & push image
          command: |
            docker build -t 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:latest .
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:latest

workflows:
  version: 2
  test_all:
    jobs:
      - build_macos
      - build_linux
      - build_docker_img:
          requires:
            - build_linux
          filters:
            branches:
              only:
                - master
