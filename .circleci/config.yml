version: 2.1

orbs:
  codecov: codecov/codecov@1.0.2

params:
  sector_builder_tests_param: &sector_builder_tests_param
    sector_builder_tests:
      description: "Run the sector builder integration tests"
      type: boolean
      default: false
  nightly_param: &nightly_param
    nightly:
      description: "job is being invoked from nightly workflow"
      type: boolean
      default: false
  user_devnet_param: &user_devnet_param
    user_devnet:
      description: "job is being invoked from user devnet workflow"
      type: boolean
      default: false
  staging_devnet_param: &staging_devnet_param
    staging_devnet:
      description: "job is being invoked from staging devnet workflow"
      type: boolean
      default: false

jobs:
  build_macos:
    macos:
      xcode: "10.0.0"
    working_directory: ~/go/src/github.com/filecoin-project/go-filecoin
    resource_class: large
    steps:
      - run:
          name: Configure environment variables
          command: |
            echo 'export PATH="/usr/local/go/bin:${PATH}:${HOME}/go/bin:${HOME}/.bin"' >> $BASH_ENV
            echo 'export FIL_PROOFS_PARAMETER_CACHE="${HOME}/filecoin-proof-parameters/"' >> $BASH_ENV
            echo 'source $BASH_ENV' >> $HOME/.bashrc
      - add_ssh_keys:
          fingerprints:
              - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - checkout
      - update_submodules
      - generate_rust_submodules_checksums
      - restore_cache:
          key: v9-go-deps-{{ arch }}-{{ checksum  "~/go/src/github.com/filecoin-project/go-filecoin/build/main.go" }}-{{ checksum "~/go/src/github.com/filecoin-project/go-filecoin/go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      # The second checkout ensures we have the most recent code since the
      # restore_cache step above can override the go-filecoin code with cached code
      - git_fetch_all_tags
      - checkout
      - restore_cache:
          key: v26.0-proof-params-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      - run:
          name: Install go
          command: |
            curl -O https://dl.google.com/go/go1.13.4.darwin-amd64.pkg && \
            sudo installer -pkg go1.13.4.darwin-amd64.pkg -target /
      - run:
          name: Install pkg-config
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pkg-config
      - run: go version
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run:
          name: Install jq
          command: |
            mkdir $HOME/.bin
            curl --location https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64 --output $HOME/.bin/jq
            chmod +x $HOME/.bin/jq
      - run:
          name: Load submodules
          command: git submodule update --init --recursive
      - go_build:
          cmd: "deps"
          no_output_timeout: "60m"
      # groth parameters are generated by the paramcache binary, run as part
      # of both deps and smartdeps commands
      - save_cache:
          key: v26.0-proof-params-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
          paths:
            - "~/filecoin-proof-parameters/"
      - save_cache:
          key: v9-go-deps-{{ arch }}-{{ checksum  "~/go/src/github.com/filecoin-project/go-filecoin/build/main.go" }}-{{ checksum "~/go/src/github.com/filecoin-project/go-filecoin/go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
          paths:
            - "~/go/pkg"
            - "~/go/src/gx"
            - "~/go/src/github.com"
            - "~/go/src/golang.org"
            - "~/.rustup"
            - "~/.cargo"
      - go_build:
          cmd: "build"
          no_output_timeout: "60m"
      # place the filecoin binary in PATH for IPTB
      - go_build:
          cmd: "install"
      # rebuild as the previous "install" step will move the binary and some tests
      # still expect that it be in the repo dir
      - go_build:
          cmd: "build"
      - mkdir_test_results
      - go_test
      - run:
          name: Create macos bundle
          command: ./scripts/build-bundle.sh
      - store_artifacts:
          path: "~/go/src/github.com/filecoin-project/go-filecoin/bundle/"
          destination: bundle
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: "."
          paths:
            - "bundle/"

  deps_linux:
    docker:
      - image: circleci/golang:1.13.1-stretch
    working_directory: /go/src/github.com/filecoin-project/go-filecoin
    resource_class: xlarge
    steps:
      - linux_configure
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - checkout
      - run:
          name: Check if any bash script sets xtrace
          command: |
            grep -r '^set\ \-\w*[x]\w*' . && exit 1 || exit 0
      - update_submodules
      # Save the Git SHA of the rust-fil-proofs submodule so that we can use it when creating a cache key
      - generate_rust_submodules_checksums
      - restore_cache:
          keys:
            - v9-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
            - v9-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      # The second checkout ensures we have the most recent code since the
      # restore_cache step above can override the go-filecoin code with cached code
      - git_fetch_all_tags
      - checkout
      - restore_cache:
          key: v26.0-proof-params-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      - run:
          name: Install Rust toolchain (for rust-fil-proofs)
          command: |
            (sudo apt-get update && sudo apt-get install -y clang libssl-dev && which cargo && which rustc) || (curl https://sh.rustup.rs -sSf | sh -s -- -y)
      - go_build:
          cmd: "deps"
          no_output_timeout: "60m"
      # groth parameters are generated by the paramcache binary, run as part
      # of both deps and smartdeps commands
      - save_cache:
          key: v26.0-proof-params-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
          paths:
            - "/home/circleci/filecoin-proof-parameters/"
      - save_cache:
          key: v9-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
          paths:
            - "/go/pkg"
            - "/go/src/gx"
            - "/go/src/github.com"
            - "/go/src/golang.org"
            - "/home/circleci/.rustup"
            - "/home/circleci/.cargo"
      - save_cache:
          key: v9-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
          paths:
            - "/go/pkg"
            - "/go/src/gx"
            - "/go/src/github.com"
            - "/go/src/golang.org"
            - "/home/circleci/.rustup"
            - "/home/circleci/.cargo"

  build_linux:
    docker:
      - image: circleci/golang:1.13.1-stretch
    working_directory: /go/src/github.com/filecoin-project/go-filecoin
    resource_class: xlarge
    parameters:
      <<: *nightly_param
    steps:
      - linux_configure
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - checkout
      - update_submodules
      # Save the Git SHA of the rust-fil-proofs submodule so that we can use it when creating a cache key
      - generate_rust_submodules_checksums
      - restore_cache:
          keys:
            - v9-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
            - v9-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      # The second checkout ensures we have the most recent code since the
      # restore_cache step above can override the go-filecoin code with cached code
      - git_fetch_all_tags
      - checkout
      - restore_cache:
          key: v26.0-proof-params-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      - go_build:
          cmd: "lint"
      - go_build:
          cmd: "build"
      # place the filecoin binary in PATH for IPTB
      - go_build:
          cmd: "install"
      # rebuild as the previous "install" step will move the binary and some tests
      # still expect that it be in the repo dir
      - go_build:
          cmd: "build"
      - run:
          name: Create linux bundle
          command: ./scripts/build-bundle.sh
      - store_artifacts:
          path: "/go/src/github.com/filecoin-project/go-filecoin/bundle/"
          destination: bundle
      - when:
          condition: << parameters.nightly >>
          steps:
            - create_nightly_version
      - persist_to_workspace:
          root: "."
          paths:
            - "bundle/"
            - "tools/gengen/gengen"
            - "fixtures"
            - "go-filecoin"
            - "tools"

  unit_test_linux:
    docker:
      - image: circleci/golang:1.13.1-stretch
    parallelism: 2 # Check .codecov.yml "after_n_builds" if changing this
    working_directory: /go/src/github.com/filecoin-project/go-filecoin
    resource_class: large
    steps:
      - linux_configure
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - checkout
      - update_submodules
      # Save the Git SHA of the rust-fil-proofs submodule so that we can use it when creating a cache key
      - generate_rust_submodules_checksums
      - restore_cache:
          keys:
            - v9-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
            - v9-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      # The second checkout ensures we have the most recent code since the
      # restore_cache step above can override the go-filecoin code with cached code
      - git_fetch_all_tags
      - checkout
      - restore_cache:
          key: v26.0-proof-params-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      - mkdir_test_results
      - go_test:
          functional: false
          integration: false
      - store_test_results:
          path: test-results

  integration_test_linux:
    docker:
      - image: circleci/golang:1.13.1-stretch
    parallelism: 2 # Check .codecov.yml "after_n_builds" if changing this
    working_directory: /go/src/github.com/filecoin-project/go-filecoin
    resource_class: xlarge
    steps:
      - linux_configure
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - checkout
      - update_submodules
      # Save the Git SHA of the rust-fil-proofs submodule so that we can use it when creating a cache key
      - generate_rust_submodules_checksums
      - restore_cache:
          keys:
            - v9-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
            - v9-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      # The second checkout ensures we have the most recent code since the
      # restore_cache step above can override the go-filecoin code with cached code
      - git_fetch_all_tags
      - checkout
      - restore_cache:
          key: v26.0-proof-params-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      - attach_workspace:
          at: "."
      - mkdir_test_results
      - go_test:
          unit: false
          integration: true
      - store_test_results:
          path: test-results

  functional_test_linux:
    docker:
      - image: circleci/golang:1.13.1-stretch
    parallelism: 2
    working_directory: /go/src/github.com/filecoin-project/go-filecoin
    resource_class: xlarge
    parameters:
      <<: *sector_builder_tests_param
    steps:
      - linux_configure
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - checkout
      - update_submodules
      # Save the Git SHA of the rust-fil-proofs submodule so that we can use it when creating a cache key
      - generate_rust_submodules_checksums
      - restore_cache:
          keys:
            - v9-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
            - v9-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "go.mod" }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      # The second checkout ensures we have the most recent code since the
      # restore_cache step above can override the go-filecoin code with cached code
      - git_fetch_all_tags
      - checkout
      - restore_cache:
          key: v26.0-proof-params-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      - attach_workspace:
          at: "."
      - mkdir_test_results
      - go_test:
          sector_builder_tests: "<< parameters.sector_builder_tests >>"
          unit: false
          integration: false
          functional: true
      - store_test_results:
          path: test-results

  publish_release:
    docker:
      - image: circleci/golang:1.13.1-stretch
    resource_class: small
    parameters:
      <<: *nightly_param
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - git_fetch_all_tags
      - checkout
      - attach_workspace:
          at: "."
      - when:
          condition: << parameters.nightly >>
          steps:
            - get_nightly_version
      - run:
          name: Publish new release
          command: |
            ./scripts/publish-release.sh

  build_docker_img:
    docker:
      - image: circleci/golang:1.13.1-stretch
    resource_class: xlarge
    parameters:
      <<: *nightly_param
      <<: *user_devnet_param
      <<: *staging_devnet_param
    working_directory: "~/docker_build"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y python-pip libyaml-dev python-dev jq
            sudo pip install awscli
      - run:
          name: login to ECR
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY
            eval $(aws --region us-east-1 ecr --no-include-email get-login)
      - checkout
      - update_submodules
      - generate_rust_submodules_checksums
      - attach_workspace:
          at: "."
      - restore_cache:
          key: v26.0-proof-params-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      - run:
          name: build a base image
          command: |
            docker build -t filecoin:all --target=base --file ./docker/Dockerfile.ci.base .
          no_output_timeout: 20m
      - when:
          condition: << parameters.nightly >>
          steps:
            - get_nightly_version
      - when:
          condition: << parameters.user_devnet >>
          steps:
            - get_user_devnet_version
      - when:
          condition: << parameters.staging_devnet >>
          steps:
            - get_staging_devnet_version
      - run:
          name: build & push image - genesis file server
          command: |
            export SHORT_GIT_SHA=$(echo $CIRCLE_SHA1 | cut -c -6)
            docker build -f ./docker/Dockerfile.ci.genesis --label "version=$SHORT_GIT_SHA" -t 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:$SHORT_GIT_SHA --cache-from filecoin:all .
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:$SHORT_GIT_SHA
            docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:latest
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:latest
            if [[ ! -z "$FILECOIN_BINARY_VERSION" ]]; then
              docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:${FILECOIN_BINARY_VERSION}
              docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:${FILECOIN_BINARY_VERSION}
            fi
      - run:
          name: build & push image - faucet
          command: |
            export SHORT_GIT_SHA=$(echo $CIRCLE_SHA1 | cut -c -6)
            docker build -f ./docker/Dockerfile.ci.faucet --label "version=$SHORT_GIT_SHA" -t 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:$SHORT_GIT_SHA --cache-from filecoin:all .
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:$SHORT_GIT_SHA
            docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:latest
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:latest
            if [[ ! -z "$FILECOIN_BINARY_VERSION" ]]; then
              docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:${FILECOIN_BINARY_VERSION}
              docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:${FILECOIN_BINARY_VERSION}
            fi
      - restore_cache:
          key: v26.0-proof-params-large-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
      - run:
          name: build & push image - filecoin
          command: |
            export SHORT_GIT_SHA=$(echo $CIRCLE_SHA1 | cut -c -6)
            export ARTIFACT_TAG="${CIRCLE_TAG:-$SHORT_GIT_SHA}"
            export FIL_PROOFS_PARAMETER_CACHE="./filecoin-proof-parameters"
            tar -xf "bundle/filecoin-$ARTIFACT_TAG-Linux.tar.gz"
            ./filecoin/paramcache
            docker build -f ./docker/Dockerfile.ci.filecoin --label "version=$SHORT_GIT_SHA" -t 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:$SHORT_GIT_SHA --cache-from filecoin:all .
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:$SHORT_GIT_SHA
            docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:latest
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:latest
            if [[ ! -z "$FILECOIN_BINARY_VERSION" ]]; then
              docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:${FILECOIN_BINARY_VERSION}
              docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:${FILECOIN_BINARY_VERSION}
            fi
      - save_cache:
          key: v26.0-proof-params-large-{{ arch }}-{{ checksum "/tmp/filecoin-ffi-checksum.txt" }}
          paths:
            - "./filecoin-proof-parameters/"

  trigger_nightly_devnet_deploy:
    docker:
      - image: circleci/golang:1.13.1-stretch
    resource_class: small
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: "."
      - get_nightly_version
      # The -f flag is require to override the local tag (may exist from previous runs or during checkout)
      # and the force flag on push is required as we are going to be overrride the tag which is not allowed by default
      # We currently create annotated flags to keep track of the timestamp when the tag was created
      - run:
          name: create & push git tag
          command: |
            git config user.email dev-helper@filecoin.io
            git config user.name filecoin-helper
            git tag -f -a ${FILECOIN_BINARY_VERSION} -m "$(date -u '+%Y-%m-%dT%H:%M:%S%z')"
            git push -f https://${GITHUB_TOKEN}@github.com/filecoin-project/go-filecoin.git ${FILECOIN_BINARY_VERSION}
      - trigger_infra_build:
          job: deploy_nightly_devnet
          branch: filecoin-nightly
      - update_badge:
          filename: "nightly-devnet.json"
      - run:
          name: cleanup nightly releases
          command: ./tools/prerelease-tool/prerelease-tool


  trigger_devnet_deploy:
    parameters:
      network:
        type: string
        default: staging
      <<: *user_devnet_param
      <<: *staging_devnet_param
    docker:
      - image: circleci/golang:1.13.1-stretch
    resource_class: small
    steps:
      - checkout
      - when:
          condition: << parameters.user_devnet >>
          steps:
            - get_user_devnet_version
      - when:
          condition: << parameters.staging_devnet>>
          steps:
            - get_staging_devnet_version
      - trigger_infra_build:
          job: deploy_<< parameters.network >>_devnet
          branch: filecoin-<< parameters.network >>net
      - update_badge:
          filename: "<< parameters.network >>-devnet.json"

filters:
  master_filter: &master_filter
    filters:
      branches:
        only:
          - master
  staging_devnet_filter: &staging_devnet_filter
    filters:
      branches:
        ignore:
          - /.*/
      tags:
        only:
          - /^staging\-devnet\-\d+\.\d+\.\d+$/
  user_devnet_filter: &user_devnet_filter
    filters:
      branches:
        ignore:
          - /.*/
      tags:
        only:
          - /^\d+\.\d+\.\d+$/

workflows:
  version: 2
  test_all:
    jobs:
      - deps_linux
      - build_linux:
          requires:
            - deps_linux
      - unit_test_linux:
          requires:
            - deps_linux
      - integration_test_linux:
          requires:
            - build_linux
      - functional_test_linux:
          requires:
            - build_linux

  build_nightly_osx:
    triggers:
      - schedule:
          # every day at 6:00 UTC
          cron: "0 6 * * *"
          <<: *master_filter
    jobs:
      - build_macos

  run_sector_builder_tests:
    triggers:
      - schedule:
          cron: "0 0,6,12,18 * * *"
          <<: *master_filter
    jobs:
      - deps_linux
      - build_linux:
          requires:
            - deps_linux
      - functional_test_linux:
          sector_builder_tests: true
          requires:
            - build_linux

  build_nightly_devnet:
    triggers:
      - schedule:
          # every day at 6:00 UTC
          cron: "0 6 * * *"
          <<: *master_filter
    jobs:
      - deps_linux
      - build_linux:
          nightly: true
          requires:
            - deps_linux
      - unit_test_linux:
          requires:
            - deps_linux
      - integration_test_linux:
          requires:
            - build_linux
      - functional_test_linux:
          requires:
            - build_linux
      - build_macos
      - build_docker_img:
          nightly: true
          requires:
            - build_linux
            - unit_test_linux
            - integration_test_linux
            - functional_test_linux
      - publish_release:
          nightly: true
          requires:
            - build_linux
            - build_macos
            - trigger_nightly_devnet_deploy
      - trigger_nightly_devnet_deploy:
          requires:
            - build_docker_img

  build_user_devnet:
    jobs:
      - build_macos:
          <<: *user_devnet_filter
      - deps_linux:
          <<: *user_devnet_filter
      - build_linux:
          requires:
            - deps_linux
          <<: *user_devnet_filter
      - unit_test_linux:
          requires:
            - deps_linux
          <<: *user_devnet_filter
      - integration_test_linux:
          requires:
            - build_linux
          <<: *user_devnet_filter
      - functional_test_linux:
          requires:
            - build_linux
          <<: *user_devnet_filter
      - publish_release:
          requires:
            - build_linux
            - unit_test_linux
            - integration_test_linux
            - functional_test_linux
            - build_macos
          <<: *user_devnet_filter
      - build_docker_img:
          user_devnet: true
          requires:
            - build_linux
            - unit_test_linux
            - integration_test_linux
            - functional_test_linux
          <<: *user_devnet_filter
      - approve_deploy:
          type: approval
          requires:
            - build_docker_img
          <<: *user_devnet_filter
      - trigger_devnet_deploy:
          user_devnet: true
          network: "user"
          requires:
            - approve_deploy
          <<: *user_devnet_filter

  build_staging_devnet:
    jobs:
      - build_macos:
          <<: *staging_devnet_filter
      - deps_linux:
          <<: *staging_devnet_filter
      - build_linux:
          requires:
            - deps_linux
          <<: *staging_devnet_filter
      - unit_test_linux:
          requires:
            - deps_linux
          <<: *staging_devnet_filter
      - integration_test_linux:
          requires:
            - build_linux
          <<: *staging_devnet_filter
      - functional_test_linux:
          requires:
            - build_linux
          <<: *staging_devnet_filter
      - publish_release:
          requires:
            - build_linux
            - unit_test_linux
            - integration_test_linux
            - functional_test_linux
            - build_macos
          <<: *staging_devnet_filter
      - build_docker_img:
          staging_devnet: true
          requires:
            - build_linux
            - unit_test_linux
            - integration_test_linux
            - functional_test_linux
          <<: *staging_devnet_filter
      - trigger_devnet_deploy:
          staging_devnet: true
          network: "staging"
          requires:
            - build_docker_img
          <<: *staging_devnet_filter

commands:
  create_nightly_version:
    steps:
      - run:
          name: create and export nightly FILECOIN_BINARY_VERSION
          command: |
            echo "nightly-${CIRCLE_BUILD_NUM}-$(echo $CIRCLE_SHA1 | cut -c -6)" > release-version-nightly.txt
      - persist_to_workspace:
          root: "."
          paths:
            - "release-version-nightly.txt"
  get_nightly_version:
    steps:
      - run:
          name: read and export nightly FILECOIN_BINARY_VERSION
          command: |
            echo "export FILECOIN_BINARY_VERSION="$(cat release-version-nightly.txt)"" >> $BASH_ENV
  get_staging_devnet_version:
    steps:
      - run:
          name: read and export staging devnet FILECOIN_BINARY_VERSION
          command: |
            echo "export FILECOIN_BINARY_VERSION="${CIRCLE_TAG}"" >> $BASH_ENV
  get_user_devnet_version:
    steps:
      - run:
          name: read and export user devnet FILECOIN_BINARY_VERSION
          command: |
            echo "export FILECOIN_BINARY_VERSION="${CIRCLE_TAG}"" >> $BASH_ENV
  git_fetch_all_tags:
    steps:
      - run:
          name: fetch all tags
          command: |
            git fetch --all
  go_build:
    parameters:
      cmd:
        type: string
      no_output_timeout:
        type: string
        default: "10m"
    steps:
      - run:
          command: go run ./build/*.go << parameters.cmd >>
          no_output_timeout: << parameters.no_output_timeout >>
  go_test:
    parameters:
      <<: *sector_builder_tests_param
      unit:
        type: boolean
        default: true
      integration:
        type: boolean
        default: true
      functional:
        type: boolean
        default: false
    steps:
      - run:
          name: Test
          no_output_timeout: 30m
          command: |
            trap "go run github.com/jstemmer/go-junit-report < test-results/go-test-suite/go-test.out > test-results/go-test-suite/go-test-report.xml" EXIT
            export TEST_PACKAGES="$(go list ./... | circleci tests split)"
            # Parallelism and timeout set to support medium-class containers, for builds on forked repos.
            go run ./build test -cover -coverprofile coverage.out -covermode=atomic -timeout=30m -parallel=4 -functional=<< parameters.functional >> -integration=<< parameters.integration >> -sectorbuilder=<< parameters.sector_builder_tests >> -unit=<< parameters.unit >> -v 2>&1 | tee test-results/go-test-suite/go-test.out
            mkdir -p /tmp/artifacts
            mv coverage.out /tmp/artifacts/coverage.out
      - codecov/upload:
          file: /tmp/artifacts/coverage.out
  linux_configure:
    steps:
      - run:
          name: Install OpenCL, a build-time requirement of libfilecoin
          command: |
            sudo apt-get update
            sudo apt-get install ocl-icd-opencl-dev
      - run:
          name: Configure environment variables
          command: |
            echo 'export FIL_PROOFS_PARAMETER_CACHE="${HOME}/filecoin-proof-parameters/"' >> $BASH_ENV
            echo 'source $BASH_ENV' >> $HOME/.bashrc
  mkdir_test_results:
    steps:
      - run:
          name: Create directories for test results
          command: mkdir -p test-results/go-test-suite
  generate_rust_submodules_checksums:
    steps:
      - run:
          name: generate filecoin-ffi checksum (used as key for Groth parameters)
          command: git rev-parse @:./vendors/filecoin-ffi > /tmp/filecoin-ffi-checksum.txt
  trigger_infra_build:
    parameters:
      branch:
        type: string
      job:
        type: string
    steps:
      - run:
          name: Trigger a build in go-filecoin-infra
          command: |
            sudo apt-get install -y curl
            # FILECOIN_BINARY_VERSION must be set in BASH_ENV of job calling this command
            curl -d build_parameters[FILECOIN_BINARY_VERSION]=${FILECOIN_BINARY_VERSION} -d build_parameters[CIRCLE_JOB]=<< parameters.job >> https://circleci.com/api/v1.1/project/github/filecoin-project/go-filecoin-infra/tree/<< parameters.branch >>?circle-token=$CIRCLE_API_TOKEN
  update_badge:
    parameters:
      filename:
        description: "filename of badge to update"
        type: string
    steps:
      - run:
          name: install jq and git
          command: |
            sudo apt-get update
            sudo apt-get install -y jq git
      - run:
          name: Update badge << parameters.filename >>
          command: |
            ./scripts/update-badge.sh << parameters.filename >>
  update_submodules:
    steps:
      - run:
          name: Update submodules
          command: git submodule update --init --recursive
