version: 2

jobs:
  build_macos:
    macos:
      xcode: "10.0.0"
    working_directory: ~/go/src/github.com/filecoin-project/go-filecoin
    resource_class: large
    steps:
      - run:
          name: Configure environment variables
          command: |
            echo 'export PATH="/usr/local/go/bin:${HOME}/.cargo/bin:${PATH}:${HOME}/go/bin:${HOME}/.bin"' >> $BASH_ENV
            echo 'export GOPATH="${HOME}/go"' >> $BASH_ENV
            echo 'export FILECOIN_PARAMETER_CACHE="${HOME}/filecoin-proof-parameters/"' >> $BASH_ENV
            echo 'export FILECOIN_USE_PRECOMPILED_RUST_PROOFS=yes' >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
              - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - checkout
      - run:
          name: Update submodules
          command: git submodule update --init
      - run:
          command: git rev-parse @:./proofs/rust-proofs > /tmp/rust-proofs-checksum.txt
      - restore_cache:
          key: v5-go-deps-{{ arch }}-{{ checksum  "~/go/src/github.com/filecoin-project/go-filecoin/build/main.go" }}-{{ checksum "~/go/src/github.com/filecoin-project/go-filecoin/package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}

        # The second checkout ensures we have the most recent code since the
        # restore_cache step above can override the go-filecoin code with cached code
      - run:
          name: fetch all tags
          command: |
            git fetch --all
      - checkout

      # groth parameters are lazily generated by rust-proofs during seal
      - restore_cache:
          key: v0-proof-params-{{ arch }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}

      - run:
          name: Install go
          command: |
            curl -O https://dl.google.com/go/go1.11.1.darwin-amd64.pkg && \
            sudo installer -pkg go1.11.1.darwin-amd64.pkg -target /
      - run:
          name: Install pkg-config
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pkg-config
      - run: go version
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run:
          name: Install jq
          command: |
            mkdir $HOME/.bin
            curl --location https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64 --output $HOME/.bin/jq
            chmod +x $HOME/.bin/jq
      - run:
          name: Install dependencies
          command: go run ./build/*.go smartdeps

      # groth parameters are generated by the paramcache binary, run as part
      # of both deps and smartdeps commands
      - save_cache:
          key: v0-proof-params-{{ arch }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "~/filecoin-proof-parameters/"

      - save_cache:
          key: v5-go-deps-{{ arch }}-{{ checksum  "~/go/src/github.com/filecoin-project/go-filecoin/build/main.go" }}-{{ checksum "~/go/src/github.com/filecoin-project/go-filecoin/package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "~/go/pkg"
            - "~/go/src/gx"
            - "~/go/src/github.com"
            - "~/go/src/golang.org"
            - "~/.rustup"
            - "~/.cargo"
      - run:
          name: Build
          command: go run ./build/*.go build

      # place the filecoin binary in PATH for IPTB
      - run:
          name: Install
          command: go run ./build/*.go install

      # rebuild as the previous "install" step will move the binary and some tests
      # still expect that it be in the repo dir
      - run:
          name: Build
          command: go run ./build/*.go build

      - run:
          name: Create directories for test results
          command: mkdir -p test-results/go-test-suite

      - run:
          name: Test
          command: |
            trap "go-junit-report < test-results/go-test-suite/go-test.out > test-results/go-test-suite/go-test-report.xml" EXIT
            go run ./build/*.go test -v 2>&1 | tee test-results/go-test-suite/go-test.out

      - run:
          name: Create macos bundle
          command: ./scripts/build-bundle.sh
      - store_artifacts:
          path: "~/go/src/github.com/filecoin-project/go-filecoin/filecoin-Darwin.tar.gz"
          destination: filecoin-Darwin.tar.gz
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: "."
          paths:
            - "filecoin-Darwin.tar.gz"

  build_linux:
    docker:
      - image: circleci/golang:1.11.1

    working_directory: /go/src/github.com/filecoin-project/go-filecoin
    resource_class: xlarge
    steps:
      - run:
          name: Configure environment variables
          command: |
            echo 'export PATH="${HOME}/.cargo/bin:${PATH}"' >> $BASH_ENV
            echo 'export FILECOIN_PARAMETER_CACHE="${HOME}/filecoin-proof-parameters/"' >> $BASH_ENV
            echo 'export FILECOIN_USE_PRECOMPILED_RUST_PROOFS=yes' >> $BASH_ENV

      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"

      # The first checkout ensures we have the files needed to restore the cache
      - checkout

      # Pull in all submodules (inc. rust-proofs)
      - run: git submodule update --init

      # Save the Git SHA of the rust-proofs submodule so that we can use it when creating a cache key
      - run: git rev-parse @:./proofs/rust-proofs > /tmp/rust-proofs-checksum.txt

      - restore_cache:
          keys:
            - v5-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
            - v5-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}

        # The second checkout ensures we have the most recent code since the
        # restore_cache step above can override the go-filecoin code with cached code
      - run:
          name: fetch all tags
          command: |
            git fetch --all
      - checkout

      # groth parameters are lazily generated by rust-proofs during seal
      - restore_cache:
          key: v0-proof-params-{{ arch }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}

      - run:
          name: Install Rust toolchain (for rust-proofs)
          command: |
            (sudo apt-get update && sudo apt-get install -y clang libssl-dev && which cargo && which rustc) || (curl https://sh.rustup.rs -sSf | sh -s -- -y)

      - run:
          name: Install Dependencies
          command: go run ./build/*.go smartdeps

      # groth parameters are generated by the paramcache binary, run as part
      # of both deps and smartdeps commands
      - save_cache:
          key: v0-proof-params-{{ arch }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "/home/circleci/filecoin-proof-parameters/"

      - save_cache:
          key: v5-go-deps-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "/go/pkg"
            - "/go/src/gx"
            - "/go/src/github.com"
            - "/go/src/golang.org"
            - "/home/circleci/.rustup"
            - "/home/circleci/.cargo"

      - save_cache:
          key: v5-go-deps-{{ .Branch }}-{{ arch }}-{{ checksum  "build/main.go" }}-{{ checksum "package.json" }}-{{ checksum "/tmp/rust-proofs-checksum.txt" }}
          paths:
            - "/go/pkg"
            - "/go/src/gx"
            - "/go/src/github.com"
            - "/go/src/golang.org"
            - "/home/circleci/.rustup"
            - "/home/circleci/.cargo"

      - run:
          name: Build
          command: go run ./build/*.go build

      # place the filecoin binary in PATH for IPTB
      - run:
          name: Install
          command: go run ./build/*.go install

      # rebuild as the previous "install" step will move the binary and some tests
      # still expect that it be in the repo dir
      - run:
          name: Build
          command: go run ./build/*.go build

      - run:
          name: Create directories for test results
          command: mkdir -p test-results/go-test-suite

      - run:
          name: Test
          command: |
            trap "go-junit-report < test-results/go-test-suite/go-test.out > test-results/go-test-suite/go-test-report.xml" EXIT
            go run ./build/*.go test -v  2>&1 | tee test-results/go-test-suite/go-test.out

      - run:
          name: Functional Tests
          command: ./functional-tests/run

      - run:
          name: Lint
          command: go run ./build/*.go lint

      - run:
          name: Create linux bundle
          command: ./scripts/build-bundle.sh
      - store_artifacts:
          path: "/go/src/github.com/filecoin-project/go-filecoin/filecoin-Linux.tar.gz"
          destination: filecoin-Linux.tar.gz
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: "."
          paths:
            - "filecoin-Linux.tar.gz"

  publish_release:
    docker:
      - image: circleci/golang:latest
    resource_class: small
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: fetch all tags
          command: |
            git fetch --all
      - checkout
      - attach_workspace:
          at: "."
      - run:
          name: Publish new release
          command: |
            ./scripts/publish-release.sh


  build_docker_img:
    docker:
      - image: circleci/golang:latest
    resource_class: xlarge
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1e:73:c5:15:75:e0:e4:98:54:3c:2b:9e:e8:94:14:2e"
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install -y python-pip libyaml-dev python-dev jq
            sudo pip install awscli
      - run:
          name: login to ECR
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY
            eval $(aws --region us-east-1 ecr --no-include-email get-login)

      # The first checkout ensures we have the files needed to restore the cache
      - checkout

      # Pull in all submodules (inc. rust-proofs)
      - run: git submodule update --init

      - run:
          name: build an image of all binaries
          command: |
            docker build -t filecoin:all --target=builder .
          no_output_timeout: 20m

      - run:
          name: build & push image - filecoin
          command: |
            export SHORT_GIT_SHA=$(echo $CIRCLE_SHA1 | cut -c -6)
            docker build -f Dockerfile.ci.filecoin --label "version=$SHORT_GIT_SHA" -t 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:$SHORT_GIT_SHA --cache-from filecoin:all .
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:$SHORT_GIT_SHA
            docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:latest
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:latest

      - run:
          name: build & push image - genesis file server
          command: |
            export SHORT_GIT_SHA=$(echo $CIRCLE_SHA1 | cut -c -6)
            docker build -f Dockerfile.ci.genesis --label "version=$SHORT_GIT_SHA" -t 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:$SHORT_GIT_SHA --cache-from filecoin:all .
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:$SHORT_GIT_SHA
            docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:latest
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:latest

      - run:
          name: build & push image - faucet
          command: |
            export SHORT_GIT_SHA=$(echo $CIRCLE_SHA1 | cut -c -6)
            docker build -f Dockerfile.ci.faucet --label "version=$SHORT_GIT_SHA" -t 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:$SHORT_GIT_SHA --cache-from filecoin:all .
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:$SHORT_GIT_SHA
            docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:latest
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:latest

  trigger_nightly_devnet_deploy:
    docker:
      - image: circleci/golang:latest
    resource_class: small
    steps:
      - setup_remote_docker
      # The first checkout, trigger_nightly_devnet_deploy has a dependency on docker_build_img and build_linux, so
      # the lateast successful build will be the same HEAD
      - checkout
      # The -f flag is require to override the local tag (may exist from previous runs or during checkout)
      # and the force flag on push is required as we are going to be overrride the tag which is not allowed by default
      # We currently create annotated flags to keep track of the timestamp when the tag was created
      - run:
          name: create & push git tag
          command: |
            git config user.email dev-helper@filecoin.io
            git config user.name filecoin-helper
            git tag -f -a devnet-nightly -m "$(date -uIseconds)"
            git push -f https://${GITHUB_TOKEN}@github.com/filecoin-project/go-filecoin.git devnet-nightly
      - run:
          name: Trigger nightly deploy in go-filecoin-infra
          command: |
            sudo apt-get install -y curl jq
            curl -X POST --header "Content-Type: application/json" -d '{"branch":"filecoin-nightly"}' https://circleci.com/api/v1.1/project/github/filecoin-project/go-filecoin-infra/build?circle-token=$CIRCLE_API_TOKEN

  trigger_user_devnet_deploy:
    docker:
      - image: circleci/golang:latest
    resource_class: small
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install -y python-pip libyaml-dev python-dev jq
            sudo pip install awscli
      - run:
          name: login to ECR
          command: |
            export AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY
            eval $(aws --region us-east-1 ecr --no-include-email get-login)
      - run:
          name: Tag filecoin image with devnet-user
          command: |
            export SHORT_GIT_SHA=$(echo $CIRCLE_SHA1 | cut -c -6)
            docker pull 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:$SHORT_GIT_SHA
            docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:devnet-user
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin:devnet-user
      - run:
          name: Tag filecoin-faucet image with devnet-user
          command: |
            export SHORT_GIT_SHA=$(echo $CIRCLE_SHA1 | cut -c -6)
            docker pull 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:$SHORT_GIT_SHA
            docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:devnet-user
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-faucet:devnet-user
      - run:
          name: Tag filecoin-genesis-file-server image with devnet-user
          command: |
            export SHORT_GIT_SHA=$(echo $CIRCLE_SHA1 | cut -c -6)
            docker pull 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:$SHORT_GIT_SHA
            docker tag 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:$SHORT_GIT_SHA 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:devnet-user
            docker push 657871693752.dkr.ecr.us-east-1.amazonaws.com/filecoin-genesis-file-server:devnet-user
      - run:
          name: Trigger user deploy in go-filecoin-infra
          command: |
            sudo apt-get install -y curl jq
            curl -X POST --header "Content-Type: application/json" -d '{"branch":"filecoin-usernet"}' https://circleci.com/api/v1.1/project/github/filecoin-project/go-filecoin-infra/build?circle-token=$CIRCLE_API_TOKEN

workflows:
  version: 2
  test_all:
    jobs:
      - build_linux
      - build_docker_img:
          requires:
            - build_linux
          filters:
            branches:
              only:
                - master

  build_nightly_osx:
    triggers:
      - schedule:
          # every day at 6:00 UTC
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build_macos

  build_and_publish_release:
    jobs:
      - build_macos:
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^\d+\.\d+\.\d+$/
      - build_linux:
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^\d+\.\d+\.\d+$/
      - publish_release:
          requires:
            - build_linux
            - build_macos
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^\d+\.\d+\.\d+$/

  build_nightly_devnet:
    triggers:
      - schedule:
          # every day at 6:00 UTC
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build_linux
      - build_docker_img:
          requires:
            - build_linux
      - trigger_nightly_devnet_deploy:
          requires:
            - build_docker_img

  build_user_devnet:
    jobs:
      - build_linux:
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^devnet-user$/
      - build_docker_img:
          requires:
            - build_linux
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^devnet-user$/
      - trigger_user_devnet_deploy:
          requires:
            - build_docker_img
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^devnet-user$/
