name: build for test/release

on:
  create:
    tags:
      - '**'
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
      - test*
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
          fetch-depth: '0'

      - name: vars
        id: vars
        run: |
          export commit=$(git rev-parse HEAD)
          export short=$(git rev-parse --short HEAD)
          export github_tag=${GITHUB_REF##*/}
          export branch=$(git symbolic-ref --short -q HEAD)
          export tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          export artifact_name=venus_$(git rev-parse --short HEAD).tar.gz
          export godeye_method=pushTest
          echo github_repository: $GITHUB_REPOSITORY
          echo github_repository: ${{github.repository}}
          export job_url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
          if [[ "$tag" =~ "v" ]]; then
            export godeye_method=pushRelease
          fi
          echo "::set-output name=commit::$commit"
          echo "::set-output name=short::$short"
          echo "::set-output name=github_tag::$github_tag"
          echo "::set-output name=branch::$branch"
          echo "::set-output name=tag::$tag"
          echo "::set-output name=artifact_name::$artifact_name"
          echo "::set-output name=job_url::$job_url"
          echo "::set-output name=godeye_method::$godeye_method"

      - name: show environment
        run: |
          echo event = ${{github.event_name}}
          echo vars.commit = ${{steps.vars.outputs.commit}}
          echo vars.short_commit = ${{steps.vars.outputs.short}}
          echo vars.github_tag =  ${{steps.vars.outputs.github_tag}}
          echo vars.branch = ${{steps.vars.outputs.branch}}
          echo vars.tag = ${{steps.vars.outputs.tag}}
          echo vars.artifact_name = ${{steps.vars.outputs.artifact_name}}
          echo vars.godeye_method = ${{steps.vars.outputs.godeye_method}}
          echo secrets.godeye_url = ${{ secrets.GODEYE_URL }}
          echo vars.job_url = ${{steps.vars.outputs.job_url}}
          echo github.ref = ${{github.ref}}
          echo github.ref_name = ${{github.ref_name}}

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Install GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64
      - name: Setup Rust
        run: (sudo apt-get update && sudo apt-get install -y clang libssl-dev && which cargo && which rustc) || (curl https://sh.rustup.rs -sSf | sh -s -- -y)
      - name: Setup make
        run: sudo apt-get install make
      - name: install deps
        run: sudo apt-get install mesa-opencl-icd ocl-icd-opencl-dev gcc git bzr jq pkg-config curl clang build-essential hwloc libhwloc-dev wget -y && sudo apt upgrade -y
      - name: Build
        run: |
          sudo make deps
          sudo make
          ./venus version
          mkdir .release && mv ./venus ./release

      - name: Zip Release
        uses: TheDoctor0/zip-release@0.6.0
        with:
          filename: ${{steps.vars.outputs.artifact_name}}
          path: ./release
          type: tar

      - name: release
        id: release
        uses: ncipollo/release-action@v1
        if: ${{ github.event_name == 'create' && startsWith(steps.vars.outputs.github_tag, 'v')==true }}
        with:
          artifacts: ${{steps.vars.outputs.artifact_name}}
          tag: ${{ steps.vars.outputs.github_tag }}
          commit: ${{ steps.vars.outputs.commit }}
          token: ${{ secrets.GITHUB_TOKEN }}

#      - name: setup oss
#        if: ${{ github.event_name == 'create' && startsWith(steps.vars.outputs.tag, 'test_') }}
#        uses: manyuanrong/setup-ossutil@master
#        with:
#          endpoint: oss-cn-beijing.aliyuncs.com
#          access-key-id: ${{ secrets.OSS_KEY_ID }}
#          access-key-secret: ${{ secrets.OSS_KEY_SECRET }}
#      - name: cp files to aliyun
#        if: ${{ github.event_name == 'create' && startsWith(steps.vars.outputs.tag, 'test_') }}
#        run: |
#          ossutil cp ./${{steps.vars.outputs.artifact_name}}  oss://shanyue-blog/
#          ossutil sign oss://urlof-artifacts --timeout 31104000

      - name: upload artifacts
        if: ${{ !(github.event_name == 'create' && startsWith(steps.vars.outputs.github_tag, 'v')==true) }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{steps.vars.outputs.artifact_name}}
          path: ./${{steps.vars.outputs.artifact_name}}
          if-no-files-found: error

      - name: push god-eye
        run: |
          export link=${{steps.vars.outputs.job_url}}
          if [[ "${{steps.release.outputs.upload_url}}" != "" ]]; then
            export link=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{steps.vars.outputs.github_tag}}/${{steps.vars.outputs.artifact_name}}
          fi
          set +e
          curl -v --max-time 20 -X PUT ${{secrets.GODEYE_URL}}/${{steps.vars.outputs.godeye_method}} \
                  --data-urlencode "type=1" \
                  --data-urlencode "commitId=${{steps.vars.outputs.commit}}" \
                  --data-urlencode "branch=${{steps.vars.outputs.branch}}" \
                  --data-urlencode "programName=venus" \
                  --data-urlencode "link=$link" \
                  --data-urlencode "description=branch:${{steps.vars.outputs.branch}}, commit:${{steps.vars.outputs.short}}, tag:${{steps.vars.outputs.github_tag}}" \
                  --data-urlencode "version=${{steps.vars.outputs.short}}"
          set -e