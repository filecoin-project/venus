github.com/filecoin-project/venus/venus-shared/api/chain/v0.FullNode <> github.com/filecoin-project/lotus/api/v0api.FullNode:
	- AuthNew
	- AuthVerify
	+ BlockTime
	> ChainExport {[func(context.Context, abi.ChainEpoch, bool, types.TipSetKey) (<-chan []uint8, error) <> func(context.Context, abi.ChainEpoch, bool, types.TipSetKey) (<-chan []uint8, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- ChainGetGenesis
	> ChainGetMessagesInTipset {[func(context.Context, types.TipSetKey) ([]types.MessageCID, error) <> func(context.Context, types.TipSetKey) ([]api.Message, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- ChainGetNode
	> ChainGetPath {[func(context.Context, types.TipSetKey, types.TipSetKey) ([]*types.HeadChange, error) <> func(context.Context, types.TipSetKey, types.TipSetKey) ([]*api.HeadChange, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> ChainGetRandomnessFromBeacon {[func(context.Context, types.TipSetKey, crypto.DomainSeparationTag, abi.ChainEpoch, []uint8) (abi.Randomness, error) <> func(context.Context, types.TipSetKey, crypto.DomainSeparationTag, abi.ChainEpoch, []uint8) (abi.Randomness, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> ChainGetRandomnessFromTickets {[func(context.Context, types.TipSetKey, crypto.DomainSeparationTag, abi.ChainEpoch, []uint8) (abi.Randomness, error) <> func(context.Context, types.TipSetKey, crypto.DomainSeparationTag, abi.ChainEpoch, []uint8) (abi.Randomness, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ ChainGetReceipts
	> ChainGetTipSet {[func(context.Context, types.TipSetKey) (*types.TipSet, error) <> func(context.Context, types.TipSetKey) (*types.TipSet, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> ChainGetTipSetByHeight {[func(context.Context, abi.ChainEpoch, types.TipSetKey) (*types.TipSet, error) <> func(context.Context, abi.ChainEpoch, types.TipSetKey) (*types.TipSet, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ ChainList
	> ChainSetHead {[func(context.Context, types.TipSetKey) error <> func(context.Context, types.TipSetKey) error] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ ChainSyncHandleNewTipSet
	> ChainTipSetWeight {[func(context.Context, types.TipSetKey) (big.Int, error) <> func(context.Context, types.TipSetKey) (big.Int, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- ClientCalcCommP
	- ClientCancelDataTransfer
	- ClientCancelRetrievalDeal
	- ClientDataTransferUpdates
	- ClientDealPieceCID
	- ClientDealSize
	- ClientFindData
	- ClientGenCar
	- ClientGetDealInfo
	- ClientGetDealStatus
	- ClientGetDealUpdates
	- ClientGetRetrievalUpdates
	- ClientHasLocal
	- ClientImport
	- ClientListDataTransfers
	- ClientListDeals
	- ClientListImports
	- ClientListRetrievals
	- ClientMinerQueryOffer
	- ClientQueryAsk
	- ClientRemoveImport
	- ClientRestartDataTransfer
	- ClientRetrieve
	- ClientRetrieveTryRestartInsufficientFunds
	- ClientRetrieveWithEvents
	- ClientStartDeal
	- ClientStatelessDeal
	- Closing
	+ Concurrent
	- CreateBackup
	- Discover
	+ GasBatchEstimateMessageGas
	> GasEstimateFeeCap {[func(context.Context, *internal.Message, int64, types.TipSetKey) (big.Int, error) <> func(context.Context, *types.Message, int64, types.TipSetKey) (big.Int, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> GasEstimateGasLimit {[func(context.Context, *internal.Message, types.TipSetKey) (int64, error) <> func(context.Context, *types.Message, types.TipSetKey) (int64, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> GasEstimateGasPremium {[func(context.Context, uint64, address.Address, int64, types.TipSetKey) (big.Int, error) <> func(context.Context, uint64, address.Address, int64, types.TipSetKey) (big.Int, error)] base=func in type: #4 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> GasEstimateMessageGas {[func(context.Context, *internal.Message, *types.MessageSendSpec, types.TipSetKey) (*internal.Message, error) <> func(context.Context, *types.Message, *api.MessageSendSpec, types.TipSetKey) (*types.Message, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported fields count: 3 != 1; nested=nil}}}}
	+ GetActor
	+ GetEntry
	+ GetFullBlock
	+ GetParentStateRootActor
	+ HasPassword
	+ ListActor
	+ LockWallet
	- LogAlerts
	- LogList
	- LogSetLevel
	- MarketAddBalance
	- MarketGetReserved
	- MarketReleaseFunds
	- MarketReserveFunds
	- MarketWithdraw
	+ MessageWait
	> MinerCreateBlock {[func(context.Context, *types.BlockTemplate) (*types.BlockMsg, error) <> func(context.Context, *api.BlockTemplate) (*types.BlockMsg, error)] base=func in type: #1 input; nested={[*types.BlockTemplate <> *api.BlockTemplate] base=pointed type; nested={[types.BlockTemplate <> api.BlockTemplate] base=struct field; nested={[types.BlockTemplate <> api.BlockTemplate] base=exported field type: #1 field named Parents; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}}}}
	> MinerGetBaseInfo {[func(context.Context, address.Address, abi.ChainEpoch, types.TipSetKey) (*types.MiningBaseInfo, error) <> func(context.Context, address.Address, abi.ChainEpoch, types.TipSetKey) (*api.MiningBaseInfo, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> MpoolBatchPushMessage {[func(context.Context, []*internal.Message, *types.MessageSendSpec) ([]*types.SignedMessage, error) <> func(context.Context, []*types.Message, *api.MessageSendSpec) ([]*types.SignedMessage, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported fields count: 3 != 1; nested=nil}}}}
	+ MpoolDeleteByAdress
	> MpoolPending {[func(context.Context, types.TipSetKey) ([]*types.SignedMessage, error) <> func(context.Context, types.TipSetKey) ([]*types.SignedMessage, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ MpoolPublishByAddr
	+ MpoolPublishMessage
	> MpoolPushMessage {[func(context.Context, *internal.Message, *types.MessageSendSpec) (*types.SignedMessage, error) <> func(context.Context, *types.Message, *api.MessageSendSpec) (*types.SignedMessage, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported fields count: 3 != 1; nested=nil}}}}
	> MpoolSelect {[func(context.Context, types.TipSetKey, float64) ([]*types.SignedMessage, error) <> func(context.Context, types.TipSetKey, float64) ([]*types.SignedMessage, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ MpoolSelects
	> MsigCancel {[func(context.Context, address.Address, uint64, address.Address) (cid.Cid, error) <> func(context.Context, address.Address, uint64, address.Address, big.Int, address.Address, uint64, []uint8) (cid.Cid, error)] base=func in num: 4 != 8; nested=nil}
	+ MsigCancelTxnHash
	- MsigGetAvailableBalance
	- MsigGetPending
	> MsigGetVested {[func(context.Context, address.Address, types.TipSetKey, types.TipSetKey) (big.Int, error) <> func(context.Context, address.Address, types.TipSetKey, types.TipSetKey) (big.Int, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- MsigGetVestingSchedule
	- NetBlockAdd
	- NetBlockList
	- NetBlockRemove
	+ NetFindProvidersAsync
	+ NetGetClosestPeers
	- NetLimit
	- NetPubsubScores
	- NetSetLimit
	- NetStat
	+ ProtocolParameters
	+ ResolveToKeyAddr
	- Session
	+ SetConcurrent
	+ SetPassword
	- Shutdown
	> StateAccountKey {[func(context.Context, address.Address, types.TipSetKey) (address.Address, error) <> func(context.Context, address.Address, types.TipSetKey) (address.Address, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateAllMinerFaults
	> StateCall {[func(context.Context, *internal.Message, types.TipSetKey) (*types.InvocResult, error) <> func(context.Context, *types.Message, types.TipSetKey) (*api.InvocResult, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateChangedActors
	> StateCirculatingSupply {[func(context.Context, types.TipSetKey) (big.Int, error) <> func(context.Context, types.TipSetKey) (big.Int, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateCompute
	> StateDealProviderCollateralBounds {[func(context.Context, abi.PaddedPieceSize, bool, types.TipSetKey) (types.DealCollateralBounds, error) <> func(context.Context, abi.PaddedPieceSize, bool, types.TipSetKey) (api.DealCollateralBounds, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateDecodeParams
	> StateGetActor {[func(context.Context, address.Address, types.TipSetKey) (*internal.Actor, error) <> func(context.Context, address.Address, types.TipSetKey) (*types.Actor, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateGetNetworkParams {[func(context.Context) (*types.NetworkParams, error) <> func(context.Context) (*api.NetworkParams, error)] base=func out type: #0 input; nested={[*types.NetworkParams <> *api.NetworkParams] base=pointed type; nested={[types.NetworkParams <> api.NetworkParams] base=struct field; nested={[types.NetworkParams <> api.NetworkParams] base=exported field type: #5 field named ForkUpgradeParams; nested={[types.ForkUpgradeParams <> api.ForkUpgradeParams] base=struct field; nested={[types.ForkUpgradeParams <> api.ForkUpgradeParams] base=exported field name: #8 field, BreezeGasTampingDuration != UpgradePriceListOopsHeight; nested=nil}}}}}}
	- StateGetRandomnessFromBeacon
	- StateGetRandomnessFromTickets
	> StateGetReceipt {[func(context.Context, cid.Cid, types.TipSetKey) (*types.MessageReceipt, error) <> func(context.Context, cid.Cid, types.TipSetKey) (*types.MessageReceipt, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateListActors {[func(context.Context, types.TipSetKey) ([]address.Address, error) <> func(context.Context, types.TipSetKey) ([]address.Address, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateListMessages
	> StateListMiners {[func(context.Context, types.TipSetKey) ([]address.Address, error) <> func(context.Context, types.TipSetKey) ([]address.Address, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateLookupID {[func(context.Context, address.Address, types.TipSetKey) (address.Address, error) <> func(context.Context, address.Address, types.TipSetKey) (address.Address, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMarketBalance {[func(context.Context, address.Address, types.TipSetKey) (types.MarketBalance, error) <> func(context.Context, address.Address, types.TipSetKey) (api.MarketBalance, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMarketDeals {[func(context.Context, types.TipSetKey) (map[string]*types.MarketDeal, error) <> func(context.Context, types.TipSetKey) (map[string]*api.MarketDeal, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMarketParticipants {[func(context.Context, types.TipSetKey) (map[string]types.MarketBalance, error) <> func(context.Context, types.TipSetKey) (map[string]api.MarketBalance, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMarketStorageDeal {[func(context.Context, abi.DealID, types.TipSetKey) (*types.MarketDeal, error) <> func(context.Context, abi.DealID, types.TipSetKey) (*api.MarketDeal, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerActiveSectors {[func(context.Context, address.Address, types.TipSetKey) ([]*miner.SectorOnChainInfo, error) <> func(context.Context, address.Address, types.TipSetKey) ([]*miner.SectorOnChainInfo, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerAvailableBalance {[func(context.Context, address.Address, types.TipSetKey) (big.Int, error) <> func(context.Context, address.Address, types.TipSetKey) (big.Int, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerDeadlines {[func(context.Context, address.Address, types.TipSetKey) ([]types.Deadline, error) <> func(context.Context, address.Address, types.TipSetKey) ([]api.Deadline, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerFaults {[func(context.Context, address.Address, types.TipSetKey) (bitfield.BitField, error) <> func(context.Context, address.Address, types.TipSetKey) (bitfield.BitField, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerInfo {[func(context.Context, address.Address, types.TipSetKey) (types.MinerInfo, error) <> func(context.Context, address.Address, types.TipSetKey) (api.MinerInfo, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerInitialPledgeCollateral {[func(context.Context, address.Address, miner.SectorPreCommitInfo, types.TipSetKey) (big.Int, error) <> func(context.Context, address.Address, miner.SectorPreCommitInfo, types.TipSetKey) (big.Int, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerPartitions {[func(context.Context, address.Address, uint64, types.TipSetKey) ([]types.Partition, error) <> func(context.Context, address.Address, uint64, types.TipSetKey) ([]api.Partition, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerPower {[func(context.Context, address.Address, types.TipSetKey) (*types.MinerPower, error) <> func(context.Context, address.Address, types.TipSetKey) (*api.MinerPower, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerPreCommitDepositForPower {[func(context.Context, address.Address, miner.SectorPreCommitInfo, types.TipSetKey) (big.Int, error) <> func(context.Context, address.Address, miner.SectorPreCommitInfo, types.TipSetKey) (big.Int, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerProvingDeadline {[func(context.Context, address.Address, types.TipSetKey) (*dline.Info, error) <> func(context.Context, address.Address, types.TipSetKey) (*dline.Info, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerRecoveries {[func(context.Context, address.Address, types.TipSetKey) (bitfield.BitField, error) <> func(context.Context, address.Address, types.TipSetKey) (bitfield.BitField, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerSectorAllocated {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (bool, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (bool, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerSectorCount {[func(context.Context, address.Address, types.TipSetKey) (types.MinerSectors, error) <> func(context.Context, address.Address, types.TipSetKey) (api.MinerSectors, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ StateMinerSectorSize
	> StateMinerSectors {[func(context.Context, address.Address, *bitfield.BitField, types.TipSetKey) ([]*miner.SectorOnChainInfo, error) <> func(context.Context, address.Address, *bitfield.BitField, types.TipSetKey) ([]*miner.SectorOnChainInfo, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ StateMinerWorkerAddress
	> StateNetworkVersion {[func(context.Context, types.TipSetKey) (network.Version, error) <> func(context.Context, types.TipSetKey) (network.Version, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateReadState
	- StateReplay
	> StateSearchMsg {[func(context.Context, cid.Cid) (*types.MsgLookup, error) <> func(context.Context, cid.Cid) (*api.MsgLookup, error)] base=func out type: #0 input; nested={[*types.MsgLookup <> *api.MsgLookup] base=pointed type; nested={[types.MsgLookup <> api.MsgLookup] base=struct field; nested={[types.MsgLookup <> api.MsgLookup] base=exported field type: #3 field named TipSet; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}}}}
	> StateSearchMsgLimited {[func(context.Context, cid.Cid, abi.ChainEpoch) (*types.MsgLookup, error) <> func(context.Context, cid.Cid, abi.ChainEpoch) (*api.MsgLookup, error)] base=func out type: #0 input; nested={[*types.MsgLookup <> *api.MsgLookup] base=pointed type; nested={[types.MsgLookup <> api.MsgLookup] base=struct field; nested={[types.MsgLookup <> api.MsgLookup] base=exported field type: #3 field named TipSet; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}}}}
	> StateSectorExpiration {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorExpiration, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorExpiration, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateSectorGetInfo {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorOnChainInfo, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorOnChainInfo, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateSectorPartition {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorLocation, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorLocation, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateSectorPreCommitInfo {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (miner.SectorPreCommitOnChainInfo, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (miner.SectorPreCommitOnChainInfo, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateVMCirculatingSupplyInternal {[func(context.Context, types.TipSetKey) (types.CirculatingSupply, error) <> func(context.Context, types.TipSetKey) (api.CirculatingSupply, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateVerifiedClientStatus {[func(context.Context, address.Address, types.TipSetKey) (*big.Int, error) <> func(context.Context, address.Address, types.TipSetKey) (*big.Int, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateVerifiedRegistryRootKey {[func(context.Context, types.TipSetKey) (address.Address, error) <> func(context.Context, types.TipSetKey) (address.Address, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateVerifierStatus {[func(context.Context, address.Address, types.TipSetKey) (*big.Int, error) <> func(context.Context, address.Address, types.TipSetKey) (*big.Int, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateWaitMsg {[func(context.Context, cid.Cid, uint64) (*types.MsgLookup, error) <> func(context.Context, cid.Cid, uint64) (*api.MsgLookup, error)] base=func out type: #0 input; nested={[*types.MsgLookup <> *api.MsgLookup] base=pointed type; nested={[types.MsgLookup <> api.MsgLookup] base=struct field; nested={[types.MsgLookup <> api.MsgLookup] base=exported field type: #3 field named TipSet; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}}}}
	> StateWaitMsgLimited {[func(context.Context, cid.Cid, uint64, abi.ChainEpoch) (*types.MsgLookup, error) <> func(context.Context, cid.Cid, uint64, abi.ChainEpoch) (*api.MsgLookup, error)] base=func out type: #0 input; nested={[*types.MsgLookup <> *api.MsgLookup] base=pointed type; nested={[types.MsgLookup <> api.MsgLookup] base=struct field; nested={[types.MsgLookup <> api.MsgLookup] base=exported field type: #3 field named TipSet; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}}}}
	- SyncCheckBad
	- SyncCheckpoint
	- SyncIncomingBlocks
	- SyncMarkBad
	- SyncUnmarkAllBad
	- SyncUnmarkBad
	- SyncValidateTipset
	+ SyncerTracker
	+ UnLockWallet
	+ VerifyEntry
	> Version {[func(context.Context) (types.Version, error) <> func(context.Context) (api.APIVersion, error)] base=func out type: #0 input; nested={[types.Version <> api.APIVersion] base=struct field; nested={[types.Version <> api.APIVersion] base=exported fields count: 2 != 3; nested=nil}}}
	+ WalletAddresses
	- WalletDelete
	> WalletExport {[func(context.Context, address.Address, string) (*types.KeyInfo, error) <> func(context.Context, address.Address) (*types.KeyInfo, error)] base=func in num: 3 != 2; nested=nil}
	- WalletList
	- WalletNew
	+ WalletNewAddress
	> WalletSign {[func(context.Context, address.Address, []uint8, types.MsgMeta) (*crypto.Signature, error) <> func(context.Context, address.Address, []uint8) (*crypto.Signature, error)] base=func in num: 4 != 3; nested=nil}
	+ WalletState
	- WalletValidateAddress
	- WalletVerify

github.com/filecoin-project/venus/venus-shared/api/chain/v1.FullNode <> github.com/filecoin-project/lotus/api.FullNode:
	- AuthNew
	- AuthVerify
	+ BeaconGetEntry
	+ BlockTime
	- ChainBlockstoreInfo
	- ChainCheckBlockstore
	> ChainExport {[func(context.Context, abi.ChainEpoch, bool, types.TipSetKey) (<-chan []uint8, error) <> func(context.Context, abi.ChainEpoch, bool, types.TipSetKey) (<-chan []uint8, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- ChainGetGenesis
	> ChainGetMessagesInTipset {[func(context.Context, types.TipSetKey) ([]types.MessageCID, error) <> func(context.Context, types.TipSetKey) ([]api.Message, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- ChainGetNode
	> ChainGetPath {[func(context.Context, types.TipSetKey, types.TipSetKey) ([]*types.HeadChange, error) <> func(context.Context, types.TipSetKey, types.TipSetKey) ([]*api.HeadChange, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ ChainGetRandomnessFromBeacon
	+ ChainGetRandomnessFromTickets
	+ ChainGetReceipts
	> ChainGetTipSet {[func(context.Context, types.TipSetKey) (*types.TipSet, error) <> func(context.Context, types.TipSetKey) (*types.TipSet, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> ChainGetTipSetAfterHeight {[func(context.Context, abi.ChainEpoch, types.TipSetKey) (*types.TipSet, error) <> func(context.Context, abi.ChainEpoch, types.TipSetKey) (*types.TipSet, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> ChainGetTipSetByHeight {[func(context.Context, abi.ChainEpoch, types.TipSetKey) (*types.TipSet, error) <> func(context.Context, abi.ChainEpoch, types.TipSetKey) (*types.TipSet, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ ChainList
	> ChainSetHead {[func(context.Context, types.TipSetKey) error <> func(context.Context, types.TipSetKey) error] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ ChainSyncHandleNewTipSet
	> ChainTipSetWeight {[func(context.Context, types.TipSetKey) (big.Int, error) <> func(context.Context, types.TipSetKey) (big.Int, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- ClientCalcCommP
	- ClientCancelDataTransfer
	- ClientCancelRetrievalDeal
	- ClientDataTransferUpdates
	- ClientDealPieceCID
	- ClientDealSize
	- ClientExport
	- ClientFindData
	- ClientGenCar
	- ClientGetDealInfo
	- ClientGetDealStatus
	- ClientGetDealUpdates
	- ClientGetRetrievalUpdates
	- ClientHasLocal
	- ClientImport
	- ClientListDataTransfers
	- ClientListDeals
	- ClientListImports
	- ClientListRetrievals
	- ClientMinerQueryOffer
	- ClientQueryAsk
	- ClientRemoveImport
	- ClientRestartDataTransfer
	- ClientRetrieve
	- ClientRetrieveTryRestartInsufficientFunds
	- ClientRetrieveWait
	- ClientStartDeal
	- ClientStatelessDeal
	- Closing
	+ Concurrent
	- CreateBackup
	- Discover
	+ GasBatchEstimateMessageGas
	> GasEstimateFeeCap {[func(context.Context, *internal.Message, int64, types.TipSetKey) (big.Int, error) <> func(context.Context, *types.Message, int64, types.TipSetKey) (big.Int, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> GasEstimateGasLimit {[func(context.Context, *internal.Message, types.TipSetKey) (int64, error) <> func(context.Context, *types.Message, types.TipSetKey) (int64, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> GasEstimateGasPremium {[func(context.Context, uint64, address.Address, int64, types.TipSetKey) (big.Int, error) <> func(context.Context, uint64, address.Address, int64, types.TipSetKey) (big.Int, error)] base=func in type: #4 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> GasEstimateMessageGas {[func(context.Context, *internal.Message, *types.MessageSendSpec, types.TipSetKey) (*internal.Message, error) <> func(context.Context, *types.Message, *api.MessageSendSpec, types.TipSetKey) (*types.Message, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported fields count: 3 != 1; nested=nil}}}}
	+ GetActor
	+ GetEntry
	+ GetFullBlock
	+ GetParentStateRootActor
	+ HasPassword
	+ ListActor
	+ LockWallet
	- LogAlerts
	- LogList
	- LogSetLevel
	- MarketAddBalance
	- MarketGetReserved
	- MarketReleaseFunds
	- MarketReserveFunds
	- MarketWithdraw
	+ MessageWait
	> MinerCreateBlock {[func(context.Context, *types.BlockTemplate) (*types.BlockMsg, error) <> func(context.Context, *api.BlockTemplate) (*types.BlockMsg, error)] base=func in type: #1 input; nested={[*types.BlockTemplate <> *api.BlockTemplate] base=pointed type; nested={[types.BlockTemplate <> api.BlockTemplate] base=struct field; nested={[types.BlockTemplate <> api.BlockTemplate] base=exported field type: #1 field named Parents; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}}}}
	> MinerGetBaseInfo {[func(context.Context, address.Address, abi.ChainEpoch, types.TipSetKey) (*types.MiningBaseInfo, error) <> func(context.Context, address.Address, abi.ChainEpoch, types.TipSetKey) (*api.MiningBaseInfo, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> MpoolBatchPushMessage {[func(context.Context, []*internal.Message, *types.MessageSendSpec) ([]*types.SignedMessage, error) <> func(context.Context, []*types.Message, *api.MessageSendSpec) ([]*types.SignedMessage, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported fields count: 3 != 1; nested=nil}}}}
	+ MpoolDeleteByAdress
	> MpoolPending {[func(context.Context, types.TipSetKey) ([]*types.SignedMessage, error) <> func(context.Context, types.TipSetKey) ([]*types.SignedMessage, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ MpoolPublishByAddr
	+ MpoolPublishMessage
	> MpoolPushMessage {[func(context.Context, *internal.Message, *types.MessageSendSpec) (*types.SignedMessage, error) <> func(context.Context, *types.Message, *api.MessageSendSpec) (*types.SignedMessage, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported fields count: 3 != 1; nested=nil}}}}
	> MpoolSelect {[func(context.Context, types.TipSetKey, float64) ([]*types.SignedMessage, error) <> func(context.Context, types.TipSetKey, float64) ([]*types.SignedMessage, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ MpoolSelects
	- MsigGetAvailableBalance
	- MsigGetPending
	> MsigGetVested {[func(context.Context, address.Address, types.TipSetKey, types.TipSetKey) (big.Int, error) <> func(context.Context, address.Address, types.TipSetKey, types.TipSetKey) (big.Int, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- MsigGetVestingSchedule
	- NetBlockAdd
	- NetBlockList
	- NetBlockRemove
	+ NetFindProvidersAsync
	+ NetGetClosestPeers
	- NetLimit
	- NetPubsubScores
	- NetSetLimit
	- NetStat
	- NodeStatus
	+ ProtocolParameters
	+ ResolveToKeyAddr
	- Session
	+ SetConcurrent
	+ SetPassword
	- Shutdown
	> StateAccountKey {[func(context.Context, address.Address, types.TipSetKey) (address.Address, error) <> func(context.Context, address.Address, types.TipSetKey) (address.Address, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateAllMinerFaults
	> StateCall {[func(context.Context, *internal.Message, types.TipSetKey) (*types.InvocResult, error) <> func(context.Context, *types.Message, types.TipSetKey) (*api.InvocResult, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateChangedActors
	> StateCirculatingSupply {[func(context.Context, types.TipSetKey) (big.Int, error) <> func(context.Context, types.TipSetKey) (big.Int, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateCompute
	> StateDealProviderCollateralBounds {[func(context.Context, abi.PaddedPieceSize, bool, types.TipSetKey) (types.DealCollateralBounds, error) <> func(context.Context, abi.PaddedPieceSize, bool, types.TipSetKey) (api.DealCollateralBounds, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateDecodeParams
	- StateEncodeParams
	> StateGetActor {[func(context.Context, address.Address, types.TipSetKey) (*internal.Actor, error) <> func(context.Context, address.Address, types.TipSetKey) (*types.Actor, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateGetNetworkParams {[func(context.Context) (*types.NetworkParams, error) <> func(context.Context) (*api.NetworkParams, error)] base=func out type: #0 input; nested={[*types.NetworkParams <> *api.NetworkParams] base=pointed type; nested={[types.NetworkParams <> api.NetworkParams] base=struct field; nested={[types.NetworkParams <> api.NetworkParams] base=exported field type: #5 field named ForkUpgradeParams; nested={[types.ForkUpgradeParams <> api.ForkUpgradeParams] base=struct field; nested={[types.ForkUpgradeParams <> api.ForkUpgradeParams] base=exported field name: #8 field, BreezeGasTampingDuration != UpgradePriceListOopsHeight; nested=nil}}}}}}
	> StateGetRandomnessFromBeacon {[func(context.Context, crypto.DomainSeparationTag, abi.ChainEpoch, []uint8, types.TipSetKey) (abi.Randomness, error) <> func(context.Context, crypto.DomainSeparationTag, abi.ChainEpoch, []uint8, types.TipSetKey) (abi.Randomness, error)] base=func in type: #4 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateGetRandomnessFromTickets {[func(context.Context, crypto.DomainSeparationTag, abi.ChainEpoch, []uint8, types.TipSetKey) (abi.Randomness, error) <> func(context.Context, crypto.DomainSeparationTag, abi.ChainEpoch, []uint8, types.TipSetKey) (abi.Randomness, error)] base=func in type: #4 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateListActors {[func(context.Context, types.TipSetKey) ([]address.Address, error) <> func(context.Context, types.TipSetKey) ([]address.Address, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateListMessages
	> StateListMiners {[func(context.Context, types.TipSetKey) ([]address.Address, error) <> func(context.Context, types.TipSetKey) ([]address.Address, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateLookupID {[func(context.Context, address.Address, types.TipSetKey) (address.Address, error) <> func(context.Context, address.Address, types.TipSetKey) (address.Address, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateLookupRobustAddress {[func(context.Context, address.Address, types.TipSetKey) (address.Address, error) <> func(context.Context, address.Address, types.TipSetKey) (address.Address, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMarketBalance {[func(context.Context, address.Address, types.TipSetKey) (types.MarketBalance, error) <> func(context.Context, address.Address, types.TipSetKey) (api.MarketBalance, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMarketDeals {[func(context.Context, types.TipSetKey) (map[string]*types.MarketDeal, error) <> func(context.Context, types.TipSetKey) (map[string]*api.MarketDeal, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMarketParticipants {[func(context.Context, types.TipSetKey) (map[string]types.MarketBalance, error) <> func(context.Context, types.TipSetKey) (map[string]api.MarketBalance, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMarketStorageDeal {[func(context.Context, abi.DealID, types.TipSetKey) (*types.MarketDeal, error) <> func(context.Context, abi.DealID, types.TipSetKey) (*api.MarketDeal, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerActiveSectors {[func(context.Context, address.Address, types.TipSetKey) ([]*miner.SectorOnChainInfo, error) <> func(context.Context, address.Address, types.TipSetKey) ([]*miner.SectorOnChainInfo, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerAvailableBalance {[func(context.Context, address.Address, types.TipSetKey) (big.Int, error) <> func(context.Context, address.Address, types.TipSetKey) (big.Int, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerDeadlines {[func(context.Context, address.Address, types.TipSetKey) ([]types.Deadline, error) <> func(context.Context, address.Address, types.TipSetKey) ([]api.Deadline, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerFaults {[func(context.Context, address.Address, types.TipSetKey) (bitfield.BitField, error) <> func(context.Context, address.Address, types.TipSetKey) (bitfield.BitField, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerInfo {[func(context.Context, address.Address, types.TipSetKey) (types.MinerInfo, error) <> func(context.Context, address.Address, types.TipSetKey) (api.MinerInfo, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerInitialPledgeCollateral {[func(context.Context, address.Address, miner.SectorPreCommitInfo, types.TipSetKey) (big.Int, error) <> func(context.Context, address.Address, miner.SectorPreCommitInfo, types.TipSetKey) (big.Int, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerPartitions {[func(context.Context, address.Address, uint64, types.TipSetKey) ([]types.Partition, error) <> func(context.Context, address.Address, uint64, types.TipSetKey) ([]api.Partition, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerPower {[func(context.Context, address.Address, types.TipSetKey) (*types.MinerPower, error) <> func(context.Context, address.Address, types.TipSetKey) (*api.MinerPower, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerPreCommitDepositForPower {[func(context.Context, address.Address, miner.SectorPreCommitInfo, types.TipSetKey) (big.Int, error) <> func(context.Context, address.Address, miner.SectorPreCommitInfo, types.TipSetKey) (big.Int, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerProvingDeadline {[func(context.Context, address.Address, types.TipSetKey) (*dline.Info, error) <> func(context.Context, address.Address, types.TipSetKey) (*dline.Info, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerRecoveries {[func(context.Context, address.Address, types.TipSetKey) (bitfield.BitField, error) <> func(context.Context, address.Address, types.TipSetKey) (bitfield.BitField, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerSectorAllocated {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (bool, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (bool, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateMinerSectorCount {[func(context.Context, address.Address, types.TipSetKey) (types.MinerSectors, error) <> func(context.Context, address.Address, types.TipSetKey) (api.MinerSectors, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ StateMinerSectorSize
	> StateMinerSectors {[func(context.Context, address.Address, *bitfield.BitField, types.TipSetKey) ([]*miner.SectorOnChainInfo, error) <> func(context.Context, address.Address, *bitfield.BitField, types.TipSetKey) ([]*miner.SectorOnChainInfo, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	+ StateMinerWorkerAddress
	> StateNetworkVersion {[func(context.Context, types.TipSetKey) (network.Version, error) <> func(context.Context, types.TipSetKey) (network.Version, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	- StateReadState
	- StateReplay
	> StateSearchMsg {[func(context.Context, types.TipSetKey, cid.Cid, abi.ChainEpoch, bool) (*types.MsgLookup, error) <> func(context.Context, types.TipSetKey, cid.Cid, abi.ChainEpoch, bool) (*api.MsgLookup, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateSectorExpiration {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorExpiration, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorExpiration, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateSectorGetInfo {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorOnChainInfo, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorOnChainInfo, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateSectorPartition {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorLocation, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (*miner.SectorLocation, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateSectorPreCommitInfo {[func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (miner.SectorPreCommitOnChainInfo, error) <> func(context.Context, address.Address, abi.SectorNumber, types.TipSetKey) (miner.SectorPreCommitOnChainInfo, error)] base=func in type: #3 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateVMCirculatingSupplyInternal {[func(context.Context, types.TipSetKey) (types.CirculatingSupply, error) <> func(context.Context, types.TipSetKey) (api.CirculatingSupply, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateVerifiedClientStatus {[func(context.Context, address.Address, types.TipSetKey) (*big.Int, error) <> func(context.Context, address.Address, types.TipSetKey) (*big.Int, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateVerifiedRegistryRootKey {[func(context.Context, types.TipSetKey) (address.Address, error) <> func(context.Context, types.TipSetKey) (address.Address, error)] base=func in type: #1 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateVerifierStatus {[func(context.Context, address.Address, types.TipSetKey) (*big.Int, error) <> func(context.Context, address.Address, types.TipSetKey) (*big.Int, error)] base=func in type: #2 input; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}
	> StateWaitMsg {[func(context.Context, cid.Cid, uint64, abi.ChainEpoch, bool) (*types.MsgLookup, error) <> func(context.Context, cid.Cid, uint64, abi.ChainEpoch, bool) (*api.MsgLookup, error)] base=func out type: #0 input; nested={[*types.MsgLookup <> *api.MsgLookup] base=pointed type; nested={[types.MsgLookup <> api.MsgLookup] base=struct field; nested={[types.MsgLookup <> api.MsgLookup] base=exported field type: #3 field named TipSet; nested={[types.TipSetKey <> types.TipSetKey] base=codec marshaler implementations for codec Cbor: true != false; nested=nil}}}}}
	- SyncCheckBad
	- SyncCheckpoint
	- SyncIncomingBlocks
	- SyncMarkBad
	- SyncUnmarkAllBad
	- SyncUnmarkBad
	- SyncValidateTipset
	+ SyncerTracker
	+ UnLockWallet
	+ VerifyEntry
	> Version {[func(context.Context) (types.Version, error) <> func(context.Context) (api.APIVersion, error)] base=func out type: #0 input; nested={[types.Version <> api.APIVersion] base=struct field; nested={[types.Version <> api.APIVersion] base=exported fields count: 2 != 3; nested=nil}}}
	+ WalletAddresses
	- WalletDelete
	> WalletExport {[func(context.Context, address.Address, string) (*types.KeyInfo, error) <> func(context.Context, address.Address) (*types.KeyInfo, error)] base=func in num: 3 != 2; nested=nil}
	- WalletList
	- WalletNew
	+ WalletNewAddress
	> WalletSign {[func(context.Context, address.Address, []uint8, types.MsgMeta) (*crypto.Signature, error) <> func(context.Context, address.Address, []uint8) (*crypto.Signature, error)] base=func in num: 4 != 3; nested=nil}
	+ WalletState
	- WalletValidateAddress
	- WalletVerify

