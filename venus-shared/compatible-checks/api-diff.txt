github.com/filecoin-project/venus/venus-shared/api/chain/v0.FullNode <> github.com/filecoin-project/lotus/api/v0api.FullNode:
	- AuthNew
	- AuthVerify
	+ BlockTime
	- ChainGetNode
	+ ChainGetReceipts
	+ ChainList
	+ ChainSyncHandleNewTipSet
	- Closing
	+ Concurrent
	- CreateBackup
	- Discover
	+ GasBatchEstimateMessageGas
	> GasEstimateMessageGas {[func(context.Context, *types.Message, *types.MessageSendSpec, types.TipSetKey) (*types.Message, error) <> func(context.Context, *types.Message, *api.MessageSendSpec, types.TipSetKey) (*types.Message, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported field name: #1 field, GasOverEstimation != MsgUuid; nested=nil}}}}
	+ GetActor
	+ GetEntry
	+ GetFullBlock
	+ GetParentStateRootActor
	+ HasPassword
	+ ListActor
	+ LockWallet
	- LogAlerts
	- LogList
	- LogSetLevel
	- MarketAddBalance
	- MarketGetReserved
	- MarketReleaseFunds
	- MarketReserveFunds
	- MarketWithdraw
	> MpoolBatchPushMessage {[func(context.Context, []*types.Message, *types.MessageSendSpec) ([]*types.SignedMessage, error) <> func(context.Context, []*types.Message, *api.MessageSendSpec) ([]*types.SignedMessage, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported field name: #1 field, GasOverEstimation != MsgUuid; nested=nil}}}}
	+ MpoolDeleteByAdress
	+ MpoolPublishByAddr
	+ MpoolPublishMessage
	> MpoolPushMessage {[func(context.Context, *types.Message, *types.MessageSendSpec) (*types.SignedMessage, error) <> func(context.Context, *types.Message, *api.MessageSendSpec) (*types.SignedMessage, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported field name: #1 field, GasOverEstimation != MsgUuid; nested=nil}}}}
	+ MpoolSelects
	- MsigAddApprove
	- MsigAddCancel
	- MsigAddPropose
	- MsigApprove
	- MsigApproveTxnHash
	- MsigCancel
	- MsigCreate
	- MsigGetAvailableBalance
	- MsigGetPending
	- MsigGetVested
	- MsigGetVestingSchedule
	- MsigPropose
	- MsigRemoveSigner
	- MsigSwapApprove
	- MsigSwapCancel
	- MsigSwapPropose
	- NetBlockAdd
	- NetBlockList
	- NetBlockRemove
	+ NetFindProvidersAsync
	+ NetGetClosestPeers
	- NetLimit
	- NetSetLimit
	- NetStat
	+ ProtocolParameters
	+ ResolveToKeyAddr
	- Session
	+ SetConcurrent
	+ SetPassword
	- Shutdown
	> StateCall {[func(context.Context, *types.Message, types.TipSetKey) (*types.InvocResult, error) <> func(context.Context, *types.Message, types.TipSetKey) (*api.InvocResult, error)] base=func out type: #0 input; nested={[*types.InvocResult <> *api.InvocResult] base=pointed type; nested={[types.InvocResult <> api.InvocResult] base=struct field; nested={[types.InvocResult <> api.InvocResult] base=exported field type: #4 field named ExecutionTrace; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=struct field; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=exported fields count: 5 != 7; nested=nil}}}}}}
	> StateCompute {[func(context.Context, abi.ChainEpoch, []*types.Message, types.TipSetKey) (*types.ComputeStateOutput, error) <> func(context.Context, abi.ChainEpoch, []*types.Message, types.TipSetKey) (*api.ComputeStateOutput, error)] base=func out type: #0 input; nested={[*types.ComputeStateOutput <> *api.ComputeStateOutput] base=pointed type; nested={[types.ComputeStateOutput <> api.ComputeStateOutput] base=struct field; nested={[types.ComputeStateOutput <> api.ComputeStateOutput] base=exported field type: #1 field named Trace; nested={[[]*types.InvocResult <> []*api.InvocResult] base=slice element; nested={[*types.InvocResult <> *api.InvocResult] base=pointed type; nested={[types.InvocResult <> api.InvocResult] base=struct field; nested={[types.InvocResult <> api.InvocResult] base=exported field type: #4 field named ExecutionTrace; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=struct field; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=exported fields count: 5 != 7; nested=nil}}}}}}}}}}
	- StateGetAllAllocations
	- StateGetAllClaims
	> StateGetNetworkParams {[func(context.Context) (*types.NetworkParams, error) <> func(context.Context) (*api.NetworkParams, error)] base=func out type: #0 input; nested={[*types.NetworkParams <> *api.NetworkParams] base=pointed type; nested={[types.NetworkParams <> api.NetworkParams] base=struct field; nested={[types.NetworkParams <> api.NetworkParams] base=exported field name: #3 field, SupportedProofTypes != PreCommitChallengeDelay; nested=nil}}}}
	+ StateMinerInitialPledgeForSector
	+ StateMinerSectorSize
	+ StateMinerWorkerAddress
	> StateReplay {[func(context.Context, types.TipSetKey, cid.Cid) (*types.InvocResult, error) <> func(context.Context, types.TipSetKey, cid.Cid) (*api.InvocResult, error)] base=func out type: #0 input; nested={[*types.InvocResult <> *api.InvocResult] base=pointed type; nested={[types.InvocResult <> api.InvocResult] base=struct field; nested={[types.InvocResult <> api.InvocResult] base=exported field type: #4 field named ExecutionTrace; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=struct field; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=exported fields count: 5 != 7; nested=nil}}}}}}
	- SyncCheckBad
	- SyncMarkBad
	- SyncUnmarkAllBad
	- SyncUnmarkBad
	- SyncValidateTipset
	+ SyncerTracker
	+ UnLockWallet
	+ VerifyEntry
	> Version {[func(context.Context) (types.Version, error) <> func(context.Context) (api.APIVersion, error)] base=func out type: #0 input; nested={[types.Version <> api.APIVersion] base=struct field; nested={[types.Version <> api.APIVersion] base=exported fields count: 2 != 4; nested=nil}}}
	+ WalletAddresses
	> WalletExport {[func(context.Context, address.Address, string) (*types.KeyInfo, error) <> func(context.Context, address.Address) (*types.KeyInfo, error)] base=func in num: 3 != 2; nested=nil}
	- WalletList
	- WalletNew
	+ WalletNewAddress
	> WalletSign {[func(context.Context, address.Address, []uint8, types.MsgMeta) (*crypto.Signature, error) <> func(context.Context, address.Address, []uint8) (*crypto.Signature, error)] base=func in num: 4 != 3; nested=nil}
	+ WalletState
	- WalletValidateAddress
	- WalletVerify

github.com/filecoin-project/venus/venus-shared/api/chain/v1.FullNode <> github.com/filecoin-project/lotus/api.FullNode:
	- AuthNew
	- AuthVerify
	+ BlockTime
	- ChainBlockstoreInfo
	- ChainCheckBlockstore
	- ChainExportRangeInternal
	- ChainGetNode
	+ ChainGetReceipts
	- ChainHotGC
	+ ChainList
	- ChainPrune
	+ ChainSyncHandleNewTipSet
	- ChainValidateIndex
	- Closing
	+ Concurrent
	- CreateBackup
	- Discover
	> EthGetBlockTransactionCountByNumber {[func(context.Context, types.EthUint64) (types.EthUint64, error) <> func(context.Context, string) (ethtypes.EthUint64, error)] base=func in type: #1 input; nested={[types.EthUint64 <> string] base=type kinds: uint64 != string; nested=nil}}
	> EthGetTransactionByBlockHashAndIndex {[func(context.Context, types.EthHash, types.EthUint64) (types.EthTx, error) <> func(context.Context, ethtypes.EthHash, ethtypes.EthUint64) (*ethtypes.EthTx, error)] base=func out type: #0 input; nested={[types.EthTx <> *ethtypes.EthTx] base=type kinds: struct != ptr; nested=nil}}
	> EthGetTransactionByBlockNumberAndIndex {[func(context.Context, types.EthUint64, types.EthUint64) (types.EthTx, error) <> func(context.Context, string, ethtypes.EthUint64) (*ethtypes.EthTx, error)] base=func in type: #1 input; nested={[types.EthUint64 <> string] base=type kinds: uint64 != string; nested=nil}}
	- EthSendRawTransactionUntrusted
	> EthTraceReplayBlockTransactions {[func(context.Context, string, []string) ([]*types.EthTraceReplayBlockTransaction, error) <> func(context.Context, string, []string) ([]*ethtypes.EthTraceReplayBlockTransaction, error)] base=func out type: #0 input; nested={[[]*types.EthTraceReplayBlockTransaction <> []*ethtypes.EthTraceReplayBlockTransaction] base=slice element; nested={[*types.EthTraceReplayBlockTransaction <> *ethtypes.EthTraceReplayBlockTransaction] base=pointed type; nested={[types.EthTraceReplayBlockTransaction <> ethtypes.EthTraceReplayBlockTransaction] base=struct field; nested={[types.EthTraceReplayBlockTransaction <> ethtypes.EthTraceReplayBlockTransaction] base=exported field name: #4 field, VMTrace != VmTrace; nested=nil}}}}}
	> FilecoinAddressToEthAddress {[func(context.Context, address.Address) (types.EthAddress, error) <> func(context.Context, jsonrpc.RawParams) (ethtypes.EthAddress, error)] base=func in type: #1 input; nested={[address.Address <> jsonrpc.RawParams] base=type kinds: struct != slice; nested=nil}}
	+ GasBatchEstimateMessageGas
	> GasEstimateMessageGas {[func(context.Context, *types.Message, *types.MessageSendSpec, types.TipSetKey) (*types.Message, error) <> func(context.Context, *types.Message, *api.MessageSendSpec, types.TipSetKey) (*types.Message, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported field name: #1 field, GasOverEstimation != MsgUuid; nested=nil}}}}
	+ GetActor
	+ GetEntry
	+ GetFullBlock
	+ GetParentStateRootActor
	+ HasPassword
	+ ListActor
	+ LockWallet
	- LogAlerts
	- LogList
	- LogSetLevel
	- MarketAddBalance
	- MarketGetReserved
	- MarketReleaseFunds
	- MarketReserveFunds
	- MarketWithdraw
	> MpoolBatchPushMessage {[func(context.Context, []*types.Message, *types.MessageSendSpec) ([]*types.SignedMessage, error) <> func(context.Context, []*types.Message, *api.MessageSendSpec) ([]*types.SignedMessage, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported field name: #1 field, GasOverEstimation != MsgUuid; nested=nil}}}}
	+ MpoolDeleteByAdress
	+ MpoolPublishByAddr
	+ MpoolPublishMessage
	> MpoolPushMessage {[func(context.Context, *types.Message, *types.MessageSendSpec) (*types.SignedMessage, error) <> func(context.Context, *types.Message, *api.MessageSendSpec) (*types.SignedMessage, error)] base=func in type: #2 input; nested={[*types.MessageSendSpec <> *api.MessageSendSpec] base=pointed type; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=struct field; nested={[types.MessageSendSpec <> api.MessageSendSpec] base=exported field name: #1 field, GasOverEstimation != MsgUuid; nested=nil}}}}
	+ MpoolSelects
	- MsigAddApprove
	- MsigAddCancel
	- MsigAddPropose
	- MsigApprove
	- MsigApproveTxnHash
	- MsigCancel
	- MsigCancelTxnHash
	- MsigCreate
	- MsigGetAvailableBalance
	- MsigGetPending
	- MsigGetVested
	- MsigGetVestingSchedule
	- MsigPropose
	- MsigRemoveSigner
	- MsigSwapApprove
	- MsigSwapCancel
	- MsigSwapPropose
	- NetBlockAdd
	- NetBlockList
	- NetBlockRemove
	+ NetFindProvidersAsync
	+ NetGetClosestPeers
	- NetLimit
	- NetSetLimit
	- NetStat
	+ ProtocolParameters
	+ ResolveToKeyAddr
	- Session
	+ SetConcurrent
	+ SetPassword
	- Shutdown
	> StateCall {[func(context.Context, *types.Message, types.TipSetKey) (*types.InvocResult, error) <> func(context.Context, *types.Message, types.TipSetKey) (*api.InvocResult, error)] base=func out type: #0 input; nested={[*types.InvocResult <> *api.InvocResult] base=pointed type; nested={[types.InvocResult <> api.InvocResult] base=struct field; nested={[types.InvocResult <> api.InvocResult] base=exported field type: #4 field named ExecutionTrace; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=struct field; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=exported fields count: 5 != 7; nested=nil}}}}}}
	> StateCompute {[func(context.Context, abi.ChainEpoch, []*types.Message, types.TipSetKey) (*types.ComputeStateOutput, error) <> func(context.Context, abi.ChainEpoch, []*types.Message, types.TipSetKey) (*api.ComputeStateOutput, error)] base=func out type: #0 input; nested={[*types.ComputeStateOutput <> *api.ComputeStateOutput] base=pointed type; nested={[types.ComputeStateOutput <> api.ComputeStateOutput] base=struct field; nested={[types.ComputeStateOutput <> api.ComputeStateOutput] base=exported field type: #1 field named Trace; nested={[[]*types.InvocResult <> []*api.InvocResult] base=slice element; nested={[*types.InvocResult <> *api.InvocResult] base=pointed type; nested={[types.InvocResult <> api.InvocResult] base=struct field; nested={[types.InvocResult <> api.InvocResult] base=exported field type: #4 field named ExecutionTrace; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=struct field; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=exported fields count: 5 != 7; nested=nil}}}}}}}}}}
	> StateGetNetworkParams {[func(context.Context) (*types.NetworkParams, error) <> func(context.Context) (*api.NetworkParams, error)] base=func out type: #0 input; nested={[*types.NetworkParams <> *api.NetworkParams] base=pointed type; nested={[types.NetworkParams <> api.NetworkParams] base=struct field; nested={[types.NetworkParams <> api.NetworkParams] base=exported field name: #3 field, SupportedProofTypes != PreCommitChallengeDelay; nested=nil}}}}
	+ StateMinerSectorSize
	+ StateMinerWorkerAddress
	> StateReplay {[func(context.Context, types.TipSetKey, cid.Cid) (*types.InvocResult, error) <> func(context.Context, types.TipSetKey, cid.Cid) (*api.InvocResult, error)] base=func out type: #0 input; nested={[*types.InvocResult <> *api.InvocResult] base=pointed type; nested={[types.InvocResult <> api.InvocResult] base=struct field; nested={[types.InvocResult <> api.InvocResult] base=exported field type: #4 field named ExecutionTrace; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=struct field; nested={[types.ExecutionTrace <> types.ExecutionTrace] base=exported fields count: 5 != 7; nested=nil}}}}}}
	- SyncCheckBad
	- SyncMarkBad
	- SyncUnmarkAllBad
	- SyncUnmarkBad
	- SyncValidateTipset
	+ SyncerTracker
	+ UnLockWallet
	+ VerifyEntry
	> Version {[func(context.Context) (types.Version, error) <> func(context.Context) (api.APIVersion, error)] base=func out type: #0 input; nested={[types.Version <> api.APIVersion] base=struct field; nested={[types.Version <> api.APIVersion] base=exported fields count: 2 != 4; nested=nil}}}
	+ WalletAddresses
	> WalletExport {[func(context.Context, address.Address, string) (*types.KeyInfo, error) <> func(context.Context, address.Address) (*types.KeyInfo, error)] base=func in num: 3 != 2; nested=nil}
	- WalletList
	- WalletNew
	+ WalletNewAddress
	> WalletSign {[func(context.Context, address.Address, []uint8, types.MsgMeta) (*crypto.Signature, error) <> func(context.Context, address.Address, []uint8) (*crypto.Signature, error)] base=func in num: 4 != 3; nested=nil}
	+ WalletState
	- WalletValidateAddress
	- WalletVerify

