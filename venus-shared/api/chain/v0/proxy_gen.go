// Code generated by github.com/filecoin-project/venus/venus-devtool/api-gen. DO NOT EDIT.
package v0

import (
	"context"
	"time"

	address "github.com/filecoin-project/go-address"
	bitfield "github.com/filecoin-project/go-bitfield"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/go-state-types/big"
	"github.com/filecoin-project/go-state-types/builtin/v8/miner"
	"github.com/filecoin-project/go-state-types/crypto"
	"github.com/filecoin-project/go-state-types/dline"
	"github.com/filecoin-project/go-state-types/network"
	blocks "github.com/ipfs/go-block-format"
	cid "github.com/ipfs/go-cid"
	"github.com/libp2p/go-libp2p-core/metrics"
	network2 "github.com/libp2p/go-libp2p-core/network"
	"github.com/libp2p/go-libp2p-core/peer"
	"github.com/libp2p/go-libp2p-core/protocol"

	lminer "github.com/filecoin-project/venus/venus-shared/actors/builtin/miner"
	"github.com/filecoin-project/venus/venus-shared/types"
)

type IBlockStoreStruct struct {
	Internal struct {
		ChainDeleteObj func(ctx context.Context, obj cid.Cid) error                                `perm:"admin"`
		ChainHasObj    func(ctx context.Context, obj cid.Cid) (bool, error)                        `perm:"read"`
		ChainPutObj    func(context.Context, blocks.Block) error                                   `perm:"admin"`
		ChainReadObj   func(ctx context.Context, cid cid.Cid) ([]byte, error)                      `perm:"read"`
		ChainStatObj   func(ctx context.Context, obj cid.Cid, base cid.Cid) (types.ObjStat, error) `perm:"read"`
	}
}

func (s *IBlockStoreStruct) ChainDeleteObj(p0 context.Context, p1 cid.Cid) error {
	return s.Internal.ChainDeleteObj(p0, p1)
}
func (s *IBlockStoreStruct) ChainHasObj(p0 context.Context, p1 cid.Cid) (bool, error) {
	return s.Internal.ChainHasObj(p0, p1)
}
func (s *IBlockStoreStruct) ChainPutObj(p0 context.Context, p1 blocks.Block) error {
	return s.Internal.ChainPutObj(p0, p1)
}
func (s *IBlockStoreStruct) ChainReadObj(p0 context.Context, p1 cid.Cid) ([]byte, error) {
	return s.Internal.ChainReadObj(p0, p1)
}
func (s *IBlockStoreStruct) ChainStatObj(p0 context.Context, p1 cid.Cid, p2 cid.Cid) (types.ObjStat, error) {
	return s.Internal.ChainStatObj(p0, p1, p2)
}

type IAccountStruct struct {
	Internal struct {
		StateAccountKey func(ctx context.Context, addr address.Address, tsk types.TipSetKey) (address.Address, error) `perm:"read"`
	}
}

func (s *IAccountStruct) StateAccountKey(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (address.Address, error) {
	return s.Internal.StateAccountKey(p0, p1, p2)
}

type IActorStruct struct {
	Internal struct {
		ListActor     func(ctx context.Context) (map[address.Address]*types.Actor, error)                         `perm:"read"`
		StateGetActor func(ctx context.Context, actor address.Address, tsk types.TipSetKey) (*types.Actor, error) `perm:"read"`
	}
}

func (s *IActorStruct) ListActor(p0 context.Context) (map[address.Address]*types.Actor, error) {
	return s.Internal.ListActor(p0)
}
func (s *IActorStruct) StateGetActor(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*types.Actor, error) {
	return s.Internal.StateGetActor(p0, p1, p2)
}

type IBeaconStruct struct {
	Internal struct {
		BeaconGetEntry func(ctx context.Context, epoch abi.ChainEpoch) (*types.BeaconEntry, error) `perm:"read"`
	}
}

func (s *IBeaconStruct) BeaconGetEntry(p0 context.Context, p1 abi.ChainEpoch) (*types.BeaconEntry, error) {
	return s.Internal.BeaconGetEntry(p0, p1)
}

type IMinerStateStruct struct {
	Internal struct {
		StateCirculatingSupply             func(ctx context.Context, tsk types.TipSetKey) (abi.TokenAmount, error)                                                                 `perm:"read"`
		StateDealProviderCollateralBounds  func(ctx context.Context, size abi.PaddedPieceSize, verified bool, tsk types.TipSetKey) (types.DealCollateralBounds, error)             `perm:"read"`
		StateListActors                    func(ctx context.Context, tsk types.TipSetKey) ([]address.Address, error)                                                               `perm:"read"`
		StateListMiners                    func(ctx context.Context, tsk types.TipSetKey) ([]address.Address, error)                                                               `perm:"read"`
		StateLookupID                      func(ctx context.Context, addr address.Address, tsk types.TipSetKey) (address.Address, error)                                           `perm:"read"`
		StateMarketBalance                 func(ctx context.Context, addr address.Address, tsk types.TipSetKey) (types.MarketBalance, error)                                       `perm:"read"`
		StateMarketDeals                   func(ctx context.Context, tsk types.TipSetKey) (map[string]*types.MarketDeal, error)                                                    `perm:"read"`
		StateMarketStorageDeal             func(ctx context.Context, dealID abi.DealID, tsk types.TipSetKey) (*types.MarketDeal, error)                                            `perm:"read"`
		StateMinerActiveSectors            func(ctx context.Context, maddr address.Address, tsk types.TipSetKey) ([]*miner.SectorOnChainInfo, error)                               `perm:"read"`
		StateMinerAvailableBalance         func(ctx context.Context, maddr address.Address, tsk types.TipSetKey) (big.Int, error)                                                  `perm:"read"`
		StateMinerDeadlines                func(ctx context.Context, maddr address.Address, tsk types.TipSetKey) ([]types.Deadline, error)                                         `perm:"read"`
		StateMinerFaults                   func(ctx context.Context, maddr address.Address, tsk types.TipSetKey) (bitfield.BitField, error)                                        `perm:"read"`
		StateMinerInfo                     func(ctx context.Context, maddr address.Address, tsk types.TipSetKey) (types.MinerInfo, error)                                          `perm:"read"`
		StateMinerInitialPledgeCollateral  func(ctx context.Context, maddr address.Address, pci miner.SectorPreCommitInfo, tsk types.TipSetKey) (big.Int, error)                   `perm:"read"`
		StateMinerPartitions               func(ctx context.Context, maddr address.Address, dlIdx uint64, tsk types.TipSetKey) ([]types.Partition, error)                          `perm:"read"`
		StateMinerPower                    func(ctx context.Context, addr address.Address, tsk types.TipSetKey) (*types.MinerPower, error)                                         `perm:"read"`
		StateMinerPreCommitDepositForPower func(ctx context.Context, maddr address.Address, pci miner.SectorPreCommitInfo, tsk types.TipSetKey) (big.Int, error)                   `perm:"read"`
		StateMinerProvingDeadline          func(ctx context.Context, maddr address.Address, tsk types.TipSetKey) (*dline.Info, error)                                              `perm:"read"`
		StateMinerRecoveries               func(ctx context.Context, maddr address.Address, tsk types.TipSetKey) (bitfield.BitField, error)                                        `perm:"read"`
		StateMinerSectorAllocated          func(ctx context.Context, maddr address.Address, s abi.SectorNumber, tsk types.TipSetKey) (bool, error)                                 `perm:"read"`
		StateMinerSectorCount              func(ctx context.Context, addr address.Address, tsk types.TipSetKey) (types.MinerSectors, error)                                        `perm:"read"`
		StateMinerSectorSize               func(ctx context.Context, maddr address.Address, tsk types.TipSetKey) (abi.SectorSize, error)                                           `perm:"read"`
		StateMinerSectors                  func(ctx context.Context, maddr address.Address, sectorNos *bitfield.BitField, tsk types.TipSetKey) ([]*miner.SectorOnChainInfo, error) `perm:"read"`
		StateMinerWorkerAddress            func(ctx context.Context, maddr address.Address, tsk types.TipSetKey) (address.Address, error)                                          `perm:"read"`
		StateSectorExpiration              func(ctx context.Context, maddr address.Address, sectorNumber abi.SectorNumber, tsk types.TipSetKey) (*lminer.SectorExpiration, error)  `perm:"read"`
		StateSectorGetInfo                 func(ctx context.Context, maddr address.Address, n abi.SectorNumber, tsk types.TipSetKey) (*miner.SectorOnChainInfo, error)             `perm:"read"`
		StateSectorPartition               func(ctx context.Context, maddr address.Address, sectorNumber abi.SectorNumber, tsk types.TipSetKey) (*lminer.SectorLocation, error)    `perm:"read"`
		StateSectorPreCommitInfo           func(ctx context.Context, maddr address.Address, n abi.SectorNumber, tsk types.TipSetKey) (miner.SectorPreCommitOnChainInfo, error)     `perm:"read"`
		StateVMCirculatingSupplyInternal   func(ctx context.Context, tsk types.TipSetKey) (types.CirculatingSupply, error)                                                         `perm:"read"`
		StateVerifiedClientStatus          func(ctx context.Context, addr address.Address, tsk types.TipSetKey) (*abi.StoragePower, error)                                         `perm:"read"`
	}
}

func (s *IMinerStateStruct) StateCirculatingSupply(p0 context.Context, p1 types.TipSetKey) (abi.TokenAmount, error) {
	return s.Internal.StateCirculatingSupply(p0, p1)
}
func (s *IMinerStateStruct) StateDealProviderCollateralBounds(p0 context.Context, p1 abi.PaddedPieceSize, p2 bool, p3 types.TipSetKey) (types.DealCollateralBounds, error) {
	return s.Internal.StateDealProviderCollateralBounds(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateListActors(p0 context.Context, p1 types.TipSetKey) ([]address.Address, error) {
	return s.Internal.StateListActors(p0, p1)
}
func (s *IMinerStateStruct) StateListMiners(p0 context.Context, p1 types.TipSetKey) ([]address.Address, error) {
	return s.Internal.StateListMiners(p0, p1)
}
func (s *IMinerStateStruct) StateLookupID(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (address.Address, error) {
	return s.Internal.StateLookupID(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMarketBalance(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (types.MarketBalance, error) {
	return s.Internal.StateMarketBalance(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMarketDeals(p0 context.Context, p1 types.TipSetKey) (map[string]*types.MarketDeal, error) {
	return s.Internal.StateMarketDeals(p0, p1)
}
func (s *IMinerStateStruct) StateMarketStorageDeal(p0 context.Context, p1 abi.DealID, p2 types.TipSetKey) (*types.MarketDeal, error) {
	return s.Internal.StateMarketStorageDeal(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerActiveSectors(p0 context.Context, p1 address.Address, p2 types.TipSetKey) ([]*miner.SectorOnChainInfo, error) {
	return s.Internal.StateMinerActiveSectors(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerAvailableBalance(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (big.Int, error) {
	return s.Internal.StateMinerAvailableBalance(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerDeadlines(p0 context.Context, p1 address.Address, p2 types.TipSetKey) ([]types.Deadline, error) {
	return s.Internal.StateMinerDeadlines(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerFaults(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (bitfield.BitField, error) {
	return s.Internal.StateMinerFaults(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerInfo(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (types.MinerInfo, error) {
	return s.Internal.StateMinerInfo(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerInitialPledgeCollateral(p0 context.Context, p1 address.Address, p2 miner.SectorPreCommitInfo, p3 types.TipSetKey) (big.Int, error) {
	return s.Internal.StateMinerInitialPledgeCollateral(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateMinerPartitions(p0 context.Context, p1 address.Address, p2 uint64, p3 types.TipSetKey) ([]types.Partition, error) {
	return s.Internal.StateMinerPartitions(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateMinerPower(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*types.MinerPower, error) {
	return s.Internal.StateMinerPower(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerPreCommitDepositForPower(p0 context.Context, p1 address.Address, p2 miner.SectorPreCommitInfo, p3 types.TipSetKey) (big.Int, error) {
	return s.Internal.StateMinerPreCommitDepositForPower(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateMinerProvingDeadline(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*dline.Info, error) {
	return s.Internal.StateMinerProvingDeadline(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerRecoveries(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (bitfield.BitField, error) {
	return s.Internal.StateMinerRecoveries(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerSectorAllocated(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (bool, error) {
	return s.Internal.StateMinerSectorAllocated(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateMinerSectorCount(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (types.MinerSectors, error) {
	return s.Internal.StateMinerSectorCount(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerSectorSize(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (abi.SectorSize, error) {
	return s.Internal.StateMinerSectorSize(p0, p1, p2)
}
func (s *IMinerStateStruct) StateMinerSectors(p0 context.Context, p1 address.Address, p2 *bitfield.BitField, p3 types.TipSetKey) ([]*miner.SectorOnChainInfo, error) {
	return s.Internal.StateMinerSectors(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateMinerWorkerAddress(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (address.Address, error) {
	return s.Internal.StateMinerWorkerAddress(p0, p1, p2)
}
func (s *IMinerStateStruct) StateSectorExpiration(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lminer.SectorExpiration, error) {
	return s.Internal.StateSectorExpiration(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateSectorGetInfo(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*miner.SectorOnChainInfo, error) {
	return s.Internal.StateSectorGetInfo(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateSectorPartition(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (*lminer.SectorLocation, error) {
	return s.Internal.StateSectorPartition(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateSectorPreCommitInfo(p0 context.Context, p1 address.Address, p2 abi.SectorNumber, p3 types.TipSetKey) (miner.SectorPreCommitOnChainInfo, error) {
	return s.Internal.StateSectorPreCommitInfo(p0, p1, p2, p3)
}
func (s *IMinerStateStruct) StateVMCirculatingSupplyInternal(p0 context.Context, p1 types.TipSetKey) (types.CirculatingSupply, error) {
	return s.Internal.StateVMCirculatingSupplyInternal(p0, p1)
}
func (s *IMinerStateStruct) StateVerifiedClientStatus(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*abi.StoragePower, error) {
	return s.Internal.StateVerifiedClientStatus(p0, p1, p2)
}

type IChainInfoStruct struct {
	Internal struct {
		BlockTime                     func(ctx context.Context) time.Duration                                                                                                                      `perm:"read"`
		ChainExport                   func(context.Context, abi.ChainEpoch, bool, types.TipSetKey) (<-chan []byte, error)                                                                          `perm:"read"`
		ChainGetBlock                 func(ctx context.Context, id cid.Cid) (*types.BlockHeader, error)                                                                                            `perm:"read"`
		ChainGetBlockMessages         func(ctx context.Context, bid cid.Cid) (*types.BlockMessages, error)                                                                                         `perm:"read"`
		ChainGetMessage               func(ctx context.Context, msgID cid.Cid) (*types.Message, error)                                                                                             `perm:"read"`
		ChainGetMessagesInTipset      func(ctx context.Context, key types.TipSetKey) ([]types.MessageCID, error)                                                                                   `perm:"read"`
		ChainGetParentMessages        func(ctx context.Context, bcid cid.Cid) ([]types.MessageCID, error)                                                                                          `perm:"read"`
		ChainGetParentReceipts        func(ctx context.Context, bcid cid.Cid) ([]*types.MessageReceipt, error)                                                                                     `perm:"read"`
		ChainGetPath                  func(ctx context.Context, from types.TipSetKey, to types.TipSetKey) ([]*types.HeadChange, error)                                                             `perm:"read"`
		ChainGetRandomnessFromBeacon  func(ctx context.Context, key types.TipSetKey, personalization crypto.DomainSeparationTag, randEpoch abi.ChainEpoch, entropy []byte) (abi.Randomness, error) `perm:"read"`
		ChainGetRandomnessFromTickets func(ctx context.Context, tsk types.TipSetKey, personalization crypto.DomainSeparationTag, randEpoch abi.ChainEpoch, entropy []byte) (abi.Randomness, error) `perm:"read"`
		ChainGetReceipts              func(ctx context.Context, id cid.Cid) ([]types.MessageReceipt, error)                                                                                        `perm:"read"`
		ChainGetTipSet                func(ctx context.Context, key types.TipSetKey) (*types.TipSet, error)                                                                                        `perm:"read"`
		ChainGetTipSetByHeight        func(ctx context.Context, height abi.ChainEpoch, tsk types.TipSetKey) (*types.TipSet, error)                                                                 `perm:"read"`
		ChainHead                     func(ctx context.Context) (*types.TipSet, error)                                                                                                             `perm:"read"`
		ChainList                     func(ctx context.Context, tsKey types.TipSetKey, count int) ([]types.TipSetKey, error)                                                                       `perm:"read"`
		ChainNotify                   func(ctx context.Context) (<-chan []*types.HeadChange, error)                                                                                                `perm:"read"`
		ChainSetHead                  func(ctx context.Context, key types.TipSetKey) error                                                                                                         `perm:"admin"`
		GetActor                      func(ctx context.Context, addr address.Address) (*types.Actor, error)                                                                                        `perm:"read"`
		GetEntry                      func(ctx context.Context, height abi.ChainEpoch, round uint64) (*types.BeaconEntry, error)                                                                   `perm:"read"`
		GetFullBlock                  func(ctx context.Context, id cid.Cid) (*types.FullBlock, error)                                                                                              `perm:"read"`
		GetParentStateRootActor       func(ctx context.Context, ts *types.TipSet, addr address.Address) (*types.Actor, error)                                                                      `perm:"read"`
		MessageWait                   func(ctx context.Context, msgCid cid.Cid, confidence, lookback abi.ChainEpoch) (*types.ChainMessage, error)                                                  `perm:"read"`
		ProtocolParameters            func(ctx context.Context) (*types.ProtocolParams, error)                                                                                                     `perm:"read"`
		ResolveToKeyAddr              func(ctx context.Context, addr address.Address, ts *types.TipSet) (address.Address, error)                                                                   `perm:"read"`
		StateActorCodeCIDs            func(context.Context, network.Version) (map[string]cid.Cid, error)                                                                                           `perm:"read"`
		StateGetNetworkParams         func(ctx context.Context) (*types.NetworkParams, error)                                                                                                      `perm:"read"`
		StateGetReceipt               func(ctx context.Context, msg cid.Cid, from types.TipSetKey) (*types.MessageReceipt, error)                                                                  `perm:"read"`
		StateNetworkName              func(ctx context.Context) (types.NetworkName, error)                                                                                                         `perm:"read"`
		StateNetworkVersion           func(ctx context.Context, tsk types.TipSetKey) (network.Version, error)                                                                                      `perm:"read"`
		StateSearchMsg                func(ctx context.Context, msg cid.Cid) (*types.MsgLookup, error)                                                                                             `perm:"read"`
		StateSearchMsgLimited         func(ctx context.Context, cid cid.Cid, limit abi.ChainEpoch) (*types.MsgLookup, error)                                                                       `perm:"read"`
		StateVerifiedRegistryRootKey  func(ctx context.Context, tsk types.TipSetKey) (address.Address, error)                                                                                      `perm:"read"`
		StateVerifierStatus           func(ctx context.Context, addr address.Address, tsk types.TipSetKey) (*abi.StoragePower, error)                                                              `perm:"read"`
		StateWaitMsg                  func(ctx context.Context, cid cid.Cid, confidence uint64) (*types.MsgLookup, error)                                                                          `perm:"read"`
		StateWaitMsgLimited           func(ctx context.Context, cid cid.Cid, confidence uint64, limit abi.ChainEpoch) (*types.MsgLookup, error)                                                    `perm:"read"`
		VerifyEntry                   func(parent, child *types.BeaconEntry, height abi.ChainEpoch) bool                                                                                           `perm:"read"`
	}
}

func (s *IChainInfoStruct) BlockTime(p0 context.Context) time.Duration {
	return s.Internal.BlockTime(p0)
}
func (s *IChainInfoStruct) ChainExport(p0 context.Context, p1 abi.ChainEpoch, p2 bool, p3 types.TipSetKey) (<-chan []byte, error) {
	return s.Internal.ChainExport(p0, p1, p2, p3)
}
func (s *IChainInfoStruct) ChainGetBlock(p0 context.Context, p1 cid.Cid) (*types.BlockHeader, error) {
	return s.Internal.ChainGetBlock(p0, p1)
}
func (s *IChainInfoStruct) ChainGetBlockMessages(p0 context.Context, p1 cid.Cid) (*types.BlockMessages, error) {
	return s.Internal.ChainGetBlockMessages(p0, p1)
}
func (s *IChainInfoStruct) ChainGetMessage(p0 context.Context, p1 cid.Cid) (*types.Message, error) {
	return s.Internal.ChainGetMessage(p0, p1)
}
func (s *IChainInfoStruct) ChainGetMessagesInTipset(p0 context.Context, p1 types.TipSetKey) ([]types.MessageCID, error) {
	return s.Internal.ChainGetMessagesInTipset(p0, p1)
}
func (s *IChainInfoStruct) ChainGetParentMessages(p0 context.Context, p1 cid.Cid) ([]types.MessageCID, error) {
	return s.Internal.ChainGetParentMessages(p0, p1)
}
func (s *IChainInfoStruct) ChainGetParentReceipts(p0 context.Context, p1 cid.Cid) ([]*types.MessageReceipt, error) {
	return s.Internal.ChainGetParentReceipts(p0, p1)
}
func (s *IChainInfoStruct) ChainGetPath(p0 context.Context, p1 types.TipSetKey, p2 types.TipSetKey) ([]*types.HeadChange, error) {
	return s.Internal.ChainGetPath(p0, p1, p2)
}
func (s *IChainInfoStruct) ChainGetRandomnessFromBeacon(p0 context.Context, p1 types.TipSetKey, p2 crypto.DomainSeparationTag, p3 abi.ChainEpoch, p4 []byte) (abi.Randomness, error) {
	return s.Internal.ChainGetRandomnessFromBeacon(p0, p1, p2, p3, p4)
}
func (s *IChainInfoStruct) ChainGetRandomnessFromTickets(p0 context.Context, p1 types.TipSetKey, p2 crypto.DomainSeparationTag, p3 abi.ChainEpoch, p4 []byte) (abi.Randomness, error) {
	return s.Internal.ChainGetRandomnessFromTickets(p0, p1, p2, p3, p4)
}
func (s *IChainInfoStruct) ChainGetReceipts(p0 context.Context, p1 cid.Cid) ([]types.MessageReceipt, error) {
	return s.Internal.ChainGetReceipts(p0, p1)
}
func (s *IChainInfoStruct) ChainGetTipSet(p0 context.Context, p1 types.TipSetKey) (*types.TipSet, error) {
	return s.Internal.ChainGetTipSet(p0, p1)
}
func (s *IChainInfoStruct) ChainGetTipSetByHeight(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetKey) (*types.TipSet, error) {
	return s.Internal.ChainGetTipSetByHeight(p0, p1, p2)
}
func (s *IChainInfoStruct) ChainHead(p0 context.Context) (*types.TipSet, error) {
	return s.Internal.ChainHead(p0)
}
func (s *IChainInfoStruct) ChainList(p0 context.Context, p1 types.TipSetKey, p2 int) ([]types.TipSetKey, error) {
	return s.Internal.ChainList(p0, p1, p2)
}
func (s *IChainInfoStruct) ChainNotify(p0 context.Context) (<-chan []*types.HeadChange, error) {
	return s.Internal.ChainNotify(p0)
}
func (s *IChainInfoStruct) ChainSetHead(p0 context.Context, p1 types.TipSetKey) error {
	return s.Internal.ChainSetHead(p0, p1)
}
func (s *IChainInfoStruct) GetActor(p0 context.Context, p1 address.Address) (*types.Actor, error) {
	return s.Internal.GetActor(p0, p1)
}
func (s *IChainInfoStruct) GetEntry(p0 context.Context, p1 abi.ChainEpoch, p2 uint64) (*types.BeaconEntry, error) {
	return s.Internal.GetEntry(p0, p1, p2)
}
func (s *IChainInfoStruct) GetFullBlock(p0 context.Context, p1 cid.Cid) (*types.FullBlock, error) {
	return s.Internal.GetFullBlock(p0, p1)
}
func (s *IChainInfoStruct) GetParentStateRootActor(p0 context.Context, p1 *types.TipSet, p2 address.Address) (*types.Actor, error) {
	return s.Internal.GetParentStateRootActor(p0, p1, p2)
}
func (s *IChainInfoStruct) MessageWait(p0 context.Context, p1 cid.Cid, p2, p3 abi.ChainEpoch) (*types.ChainMessage, error) {
	return s.Internal.MessageWait(p0, p1, p2, p3)
}
func (s *IChainInfoStruct) ProtocolParameters(p0 context.Context) (*types.ProtocolParams, error) {
	return s.Internal.ProtocolParameters(p0)
}
func (s *IChainInfoStruct) ResolveToKeyAddr(p0 context.Context, p1 address.Address, p2 *types.TipSet) (address.Address, error) {
	return s.Internal.ResolveToKeyAddr(p0, p1, p2)
}
func (s *IChainInfoStruct) StateActorCodeCIDs(p0 context.Context, p1 network.Version) (map[string]cid.Cid, error) {
	return s.Internal.StateActorCodeCIDs(p0, p1)
}
func (s *IChainInfoStruct) StateGetNetworkParams(p0 context.Context) (*types.NetworkParams, error) {
	return s.Internal.StateGetNetworkParams(p0)
}
func (s *IChainInfoStruct) StateGetReceipt(p0 context.Context, p1 cid.Cid, p2 types.TipSetKey) (*types.MessageReceipt, error) {
	return s.Internal.StateGetReceipt(p0, p1, p2)
}
func (s *IChainInfoStruct) StateNetworkName(p0 context.Context) (types.NetworkName, error) {
	return s.Internal.StateNetworkName(p0)
}
func (s *IChainInfoStruct) StateNetworkVersion(p0 context.Context, p1 types.TipSetKey) (network.Version, error) {
	return s.Internal.StateNetworkVersion(p0, p1)
}
func (s *IChainInfoStruct) StateSearchMsg(p0 context.Context, p1 cid.Cid) (*types.MsgLookup, error) {
	return s.Internal.StateSearchMsg(p0, p1)
}
func (s *IChainInfoStruct) StateSearchMsgLimited(p0 context.Context, p1 cid.Cid, p2 abi.ChainEpoch) (*types.MsgLookup, error) {
	return s.Internal.StateSearchMsgLimited(p0, p1, p2)
}
func (s *IChainInfoStruct) StateVerifiedRegistryRootKey(p0 context.Context, p1 types.TipSetKey) (address.Address, error) {
	return s.Internal.StateVerifiedRegistryRootKey(p0, p1)
}
func (s *IChainInfoStruct) StateVerifierStatus(p0 context.Context, p1 address.Address, p2 types.TipSetKey) (*abi.StoragePower, error) {
	return s.Internal.StateVerifierStatus(p0, p1, p2)
}
func (s *IChainInfoStruct) StateWaitMsg(p0 context.Context, p1 cid.Cid, p2 uint64) (*types.MsgLookup, error) {
	return s.Internal.StateWaitMsg(p0, p1, p2)
}
func (s *IChainInfoStruct) StateWaitMsgLimited(p0 context.Context, p1 cid.Cid, p2 uint64, p3 abi.ChainEpoch) (*types.MsgLookup, error) {
	return s.Internal.StateWaitMsgLimited(p0, p1, p2, p3)
}
func (s *IChainInfoStruct) VerifyEntry(p0, p1 *types.BeaconEntry, p2 abi.ChainEpoch) bool {
	return s.Internal.VerifyEntry(p0, p1, p2)
}

type IChainStruct struct {
	IAccountStruct
	IActorStruct
	IBeaconStruct
	IMinerStateStruct
	IChainInfoStruct
}

type IMarketStruct struct {
	Internal struct {
		StateMarketParticipants func(ctx context.Context, tsk types.TipSetKey) (map[string]types.MarketBalance, error) `perm:"read"`
	}
}

func (s *IMarketStruct) StateMarketParticipants(p0 context.Context, p1 types.TipSetKey) (map[string]types.MarketBalance, error) {
	return s.Internal.StateMarketParticipants(p0, p1)
}

type IMiningStruct struct {
	Internal struct {
		MinerCreateBlock func(ctx context.Context, bt *types.BlockTemplate) (*types.BlockMsg, error)                                                `perm:"write"`
		MinerGetBaseInfo func(ctx context.Context, maddr address.Address, round abi.ChainEpoch, tsk types.TipSetKey) (*types.MiningBaseInfo, error) `perm:"read"`
	}
}

func (s *IMiningStruct) MinerCreateBlock(p0 context.Context, p1 *types.BlockTemplate) (*types.BlockMsg, error) {
	return s.Internal.MinerCreateBlock(p0, p1)
}
func (s *IMiningStruct) MinerGetBaseInfo(p0 context.Context, p1 address.Address, p2 abi.ChainEpoch, p3 types.TipSetKey) (*types.MiningBaseInfo, error) {
	return s.Internal.MinerGetBaseInfo(p0, p1, p2, p3)
}

type IMessagePoolStruct struct {
	Internal struct {
		GasBatchEstimateMessageGas func(ctx context.Context, estimateMessages []*types.EstimateMessage, fromNonce uint64, tsk types.TipSetKey) ([]*types.EstimateResult, error) `perm:"read"`
		GasEstimateFeeCap          func(ctx context.Context, msg *types.Message, maxqueueblks int64, tsk types.TipSetKey) (big.Int, error)                                      `perm:"read"`
		GasEstimateGasLimit        func(ctx context.Context, msgIn *types.Message, tsk types.TipSetKey) (int64, error)                                                          `perm:"read"`
		GasEstimateGasPremium      func(ctx context.Context, nblocksincl uint64, sender address.Address, gaslimit int64, tsk types.TipSetKey) (big.Int, error)                  `perm:"read"`
		GasEstimateMessageGas      func(ctx context.Context, msg *types.Message, spec *types.MessageSendSpec, tsk types.TipSetKey) (*types.Message, error)                      `perm:"read"`
		MpoolBatchPush             func(ctx context.Context, smsgs []*types.SignedMessage) ([]cid.Cid, error)                                                                   `perm:"write"`
		MpoolBatchPushMessage      func(ctx context.Context, msgs []*types.Message, spec *types.MessageSendSpec) ([]*types.SignedMessage, error)                                `perm:"sign"`
		MpoolBatchPushUntrusted    func(ctx context.Context, smsgs []*types.SignedMessage) ([]cid.Cid, error)                                                                   `perm:"write"`
		MpoolClear                 func(ctx context.Context, local bool) error                                                                                                  `perm:"write"`
		MpoolDeleteByAdress        func(ctx context.Context, addr address.Address) error                                                                                        `perm:"admin"`
		MpoolGetConfig             func(context.Context) (*types.MpoolConfig, error)                                                                                            `perm:"read"`
		MpoolGetNonce              func(ctx context.Context, addr address.Address) (uint64, error)                                                                              `perm:"read"`
		MpoolPending               func(ctx context.Context, tsk types.TipSetKey) ([]*types.SignedMessage, error)                                                               `perm:"read"`
		MpoolPublishByAddr         func(context.Context, address.Address) error                                                                                                 `perm:"admin"`
		MpoolPublishMessage        func(ctx context.Context, smsg *types.SignedMessage) error                                                                                   `perm:"admin"`
		MpoolPush                  func(ctx context.Context, smsg *types.SignedMessage) (cid.Cid, error)                                                                        `perm:"write"`
		MpoolPushMessage           func(ctx context.Context, msg *types.Message, spec *types.MessageSendSpec) (*types.SignedMessage, error)                                     `perm:"sign"`
		MpoolPushUntrusted         func(ctx context.Context, smsg *types.SignedMessage) (cid.Cid, error)                                                                        `perm:"write"`
		MpoolSelect                func(context.Context, types.TipSetKey, float64) ([]*types.SignedMessage, error)                                                              `perm:"read"`
		MpoolSelects               func(context.Context, types.TipSetKey, []float64) ([][]*types.SignedMessage, error)                                                          `perm:"read"`
		MpoolSetConfig             func(ctx context.Context, cfg *types.MpoolConfig) error                                                                                      `perm:"admin"`
		MpoolSub                   func(ctx context.Context) (<-chan types.MpoolUpdate, error)                                                                                  `perm:"read"`
	}
}

func (s *IMessagePoolStruct) GasBatchEstimateMessageGas(p0 context.Context, p1 []*types.EstimateMessage, p2 uint64, p3 types.TipSetKey) ([]*types.EstimateResult, error) {
	return s.Internal.GasBatchEstimateMessageGas(p0, p1, p2, p3)
}
func (s *IMessagePoolStruct) GasEstimateFeeCap(p0 context.Context, p1 *types.Message, p2 int64, p3 types.TipSetKey) (big.Int, error) {
	return s.Internal.GasEstimateFeeCap(p0, p1, p2, p3)
}
func (s *IMessagePoolStruct) GasEstimateGasLimit(p0 context.Context, p1 *types.Message, p2 types.TipSetKey) (int64, error) {
	return s.Internal.GasEstimateGasLimit(p0, p1, p2)
}
func (s *IMessagePoolStruct) GasEstimateGasPremium(p0 context.Context, p1 uint64, p2 address.Address, p3 int64, p4 types.TipSetKey) (big.Int, error) {
	return s.Internal.GasEstimateGasPremium(p0, p1, p2, p3, p4)
}
func (s *IMessagePoolStruct) GasEstimateMessageGas(p0 context.Context, p1 *types.Message, p2 *types.MessageSendSpec, p3 types.TipSetKey) (*types.Message, error) {
	return s.Internal.GasEstimateMessageGas(p0, p1, p2, p3)
}
func (s *IMessagePoolStruct) MpoolBatchPush(p0 context.Context, p1 []*types.SignedMessage) ([]cid.Cid, error) {
	return s.Internal.MpoolBatchPush(p0, p1)
}
func (s *IMessagePoolStruct) MpoolBatchPushMessage(p0 context.Context, p1 []*types.Message, p2 *types.MessageSendSpec) ([]*types.SignedMessage, error) {
	return s.Internal.MpoolBatchPushMessage(p0, p1, p2)
}
func (s *IMessagePoolStruct) MpoolBatchPushUntrusted(p0 context.Context, p1 []*types.SignedMessage) ([]cid.Cid, error) {
	return s.Internal.MpoolBatchPushUntrusted(p0, p1)
}
func (s *IMessagePoolStruct) MpoolClear(p0 context.Context, p1 bool) error {
	return s.Internal.MpoolClear(p0, p1)
}
func (s *IMessagePoolStruct) MpoolDeleteByAdress(p0 context.Context, p1 address.Address) error {
	return s.Internal.MpoolDeleteByAdress(p0, p1)
}
func (s *IMessagePoolStruct) MpoolGetConfig(p0 context.Context) (*types.MpoolConfig, error) {
	return s.Internal.MpoolGetConfig(p0)
}
func (s *IMessagePoolStruct) MpoolGetNonce(p0 context.Context, p1 address.Address) (uint64, error) {
	return s.Internal.MpoolGetNonce(p0, p1)
}
func (s *IMessagePoolStruct) MpoolPending(p0 context.Context, p1 types.TipSetKey) ([]*types.SignedMessage, error) {
	return s.Internal.MpoolPending(p0, p1)
}
func (s *IMessagePoolStruct) MpoolPublishByAddr(p0 context.Context, p1 address.Address) error {
	return s.Internal.MpoolPublishByAddr(p0, p1)
}
func (s *IMessagePoolStruct) MpoolPublishMessage(p0 context.Context, p1 *types.SignedMessage) error {
	return s.Internal.MpoolPublishMessage(p0, p1)
}
func (s *IMessagePoolStruct) MpoolPush(p0 context.Context, p1 *types.SignedMessage) (cid.Cid, error) {
	return s.Internal.MpoolPush(p0, p1)
}
func (s *IMessagePoolStruct) MpoolPushMessage(p0 context.Context, p1 *types.Message, p2 *types.MessageSendSpec) (*types.SignedMessage, error) {
	return s.Internal.MpoolPushMessage(p0, p1, p2)
}
func (s *IMessagePoolStruct) MpoolPushUntrusted(p0 context.Context, p1 *types.SignedMessage) (cid.Cid, error) {
	return s.Internal.MpoolPushUntrusted(p0, p1)
}
func (s *IMessagePoolStruct) MpoolSelect(p0 context.Context, p1 types.TipSetKey, p2 float64) ([]*types.SignedMessage, error) {
	return s.Internal.MpoolSelect(p0, p1, p2)
}
func (s *IMessagePoolStruct) MpoolSelects(p0 context.Context, p1 types.TipSetKey, p2 []float64) ([][]*types.SignedMessage, error) {
	return s.Internal.MpoolSelects(p0, p1, p2)
}
func (s *IMessagePoolStruct) MpoolSetConfig(p0 context.Context, p1 *types.MpoolConfig) error {
	return s.Internal.MpoolSetConfig(p0, p1)
}
func (s *IMessagePoolStruct) MpoolSub(p0 context.Context) (<-chan types.MpoolUpdate, error) {
	return s.Internal.MpoolSub(p0)
}

type IMultiSigStruct struct {
	Internal struct {
		MsigAddApprove     func(ctx context.Context, msig address.Address, src address.Address, txID uint64, proposer address.Address, newAdd address.Address, inc bool) (cid.Cid, error)                                   `perm:"sign"`
		MsigAddCancel      func(ctx context.Context, msig address.Address, src address.Address, txID uint64, newAdd address.Address, inc bool) (cid.Cid, error)                                                             `perm:"sign"`
		MsigAddPropose     func(ctx context.Context, msig address.Address, src address.Address, newAdd address.Address, inc bool) (cid.Cid, error)                                                                          `perm:"sign"`
		MsigApprove        func(ctx context.Context, msig address.Address, txID uint64, src address.Address) (cid.Cid, error)                                                                                               `perm:"sign"`
		MsigApproveTxnHash func(ctx context.Context, msig address.Address, txID uint64, proposer address.Address, to address.Address, amt types.BigInt, src address.Address, method uint64, params []byte) (cid.Cid, error) `perm:"sign"`
		MsigCancel         func(ctx context.Context, msig address.Address, txID uint64, src address.Address) (cid.Cid, error)                                                                                               `perm:"sign"`
		MsigCancelTxnHash  func(context.Context, address.Address, uint64, address.Address, types.BigInt, address.Address, uint64, []byte) (cid.Cid, error)                                                                  `perm:"sign"`
		MsigCreate         func(context.Context, uint64, []address.Address, abi.ChainEpoch, types.BigInt, address.Address, types.BigInt) (cid.Cid, error)                                                                   `perm:"sign"`
		MsigGetVested      func(ctx context.Context, addr address.Address, start types.TipSetKey, end types.TipSetKey) (types.BigInt, error)                                                                                `perm:"read"`
		MsigPropose        func(ctx context.Context, msig address.Address, to address.Address, amt types.BigInt, src address.Address, method uint64, params []byte) (cid.Cid, error)                                        `perm:"sign"`
		MsigRemoveSigner   func(ctx context.Context, msig address.Address, proposer address.Address, toRemove address.Address, decrease bool) (cid.Cid, error)                                                              `perm:"sign"`
		MsigSwapApprove    func(ctx context.Context, msig address.Address, src address.Address, txID uint64, proposer address.Address, oldAdd address.Address, newAdd address.Address) (cid.Cid, error)                     `perm:"sign"`
		MsigSwapCancel     func(ctx context.Context, msig address.Address, src address.Address, txID uint64, oldAdd address.Address, newAdd address.Address) (cid.Cid, error)                                               `perm:"sign"`
		MsigSwapPropose    func(ctx context.Context, msig address.Address, src address.Address, oldAdd address.Address, newAdd address.Address) (cid.Cid, error)                                                            `perm:"sign"`
	}
}

func (s *IMultiSigStruct) MsigAddApprove(p0 context.Context, p1 address.Address, p2 address.Address, p3 uint64, p4 address.Address, p5 address.Address, p6 bool) (cid.Cid, error) {
	return s.Internal.MsigAddApprove(p0, p1, p2, p3, p4, p5, p6)
}
func (s *IMultiSigStruct) MsigAddCancel(p0 context.Context, p1 address.Address, p2 address.Address, p3 uint64, p4 address.Address, p5 bool) (cid.Cid, error) {
	return s.Internal.MsigAddCancel(p0, p1, p2, p3, p4, p5)
}
func (s *IMultiSigStruct) MsigAddPropose(p0 context.Context, p1 address.Address, p2 address.Address, p3 address.Address, p4 bool) (cid.Cid, error) {
	return s.Internal.MsigAddPropose(p0, p1, p2, p3, p4)
}
func (s *IMultiSigStruct) MsigApprove(p0 context.Context, p1 address.Address, p2 uint64, p3 address.Address) (cid.Cid, error) {
	return s.Internal.MsigApprove(p0, p1, p2, p3)
}
func (s *IMultiSigStruct) MsigApproveTxnHash(p0 context.Context, p1 address.Address, p2 uint64, p3 address.Address, p4 address.Address, p5 types.BigInt, p6 address.Address, p7 uint64, p8 []byte) (cid.Cid, error) {
	return s.Internal.MsigApproveTxnHash(p0, p1, p2, p3, p4, p5, p6, p7, p8)
}
func (s *IMultiSigStruct) MsigCancel(p0 context.Context, p1 address.Address, p2 uint64, p3 address.Address) (cid.Cid, error) {
	return s.Internal.MsigCancel(p0, p1, p2, p3)
}
func (s *IMultiSigStruct) MsigCancelTxnHash(p0 context.Context, p1 address.Address, p2 uint64, p3 address.Address, p4 types.BigInt, p5 address.Address, p6 uint64, p7 []byte) (cid.Cid, error) {
	return s.Internal.MsigCancelTxnHash(p0, p1, p2, p3, p4, p5, p6, p7)
}
func (s *IMultiSigStruct) MsigCreate(p0 context.Context, p1 uint64, p2 []address.Address, p3 abi.ChainEpoch, p4 types.BigInt, p5 address.Address, p6 types.BigInt) (cid.Cid, error) {
	return s.Internal.MsigCreate(p0, p1, p2, p3, p4, p5, p6)
}
func (s *IMultiSigStruct) MsigGetVested(p0 context.Context, p1 address.Address, p2 types.TipSetKey, p3 types.TipSetKey) (types.BigInt, error) {
	return s.Internal.MsigGetVested(p0, p1, p2, p3)
}
func (s *IMultiSigStruct) MsigPropose(p0 context.Context, p1 address.Address, p2 address.Address, p3 types.BigInt, p4 address.Address, p5 uint64, p6 []byte) (cid.Cid, error) {
	return s.Internal.MsigPropose(p0, p1, p2, p3, p4, p5, p6)
}
func (s *IMultiSigStruct) MsigRemoveSigner(p0 context.Context, p1 address.Address, p2 address.Address, p3 address.Address, p4 bool) (cid.Cid, error) {
	return s.Internal.MsigRemoveSigner(p0, p1, p2, p3, p4)
}
func (s *IMultiSigStruct) MsigSwapApprove(p0 context.Context, p1 address.Address, p2 address.Address, p3 uint64, p4 address.Address, p5 address.Address, p6 address.Address) (cid.Cid, error) {
	return s.Internal.MsigSwapApprove(p0, p1, p2, p3, p4, p5, p6)
}
func (s *IMultiSigStruct) MsigSwapCancel(p0 context.Context, p1 address.Address, p2 address.Address, p3 uint64, p4 address.Address, p5 address.Address) (cid.Cid, error) {
	return s.Internal.MsigSwapCancel(p0, p1, p2, p3, p4, p5)
}
func (s *IMultiSigStruct) MsigSwapPropose(p0 context.Context, p1 address.Address, p2 address.Address, p3 address.Address, p4 address.Address) (cid.Cid, error) {
	return s.Internal.MsigSwapPropose(p0, p1, p2, p3, p4)
}

type INetworkStruct struct {
	Internal struct {
		ID                          func(ctx context.Context) (peer.ID, error)                             `perm:"read"`
		NetAddrsListen              func(ctx context.Context) (peer.AddrInfo, error)                       `perm:"read"`
		NetAgentVersion             func(ctx context.Context, p peer.ID) (string, error)                   `perm:"read"`
		NetAutoNatStatus            func(context.Context) (types.NatInfo, error)                           `perm:"read"`
		NetBandwidthStats           func(ctx context.Context) (metrics.Stats, error)                       `perm:"read"`
		NetBandwidthStatsByPeer     func(ctx context.Context) (map[string]metrics.Stats, error)            `perm:"read"`
		NetBandwidthStatsByProtocol func(ctx context.Context) (map[protocol.ID]metrics.Stats, error)       `perm:"read"`
		NetConnect                  func(ctx context.Context, pi peer.AddrInfo) error                      `perm:"admin"`
		NetConnectedness            func(context.Context, peer.ID) (network2.Connectedness, error)         `perm:"read"`
		NetDisconnect               func(ctx context.Context, p peer.ID) error                             `perm:"admin"`
		NetFindPeer                 func(ctx context.Context, p peer.ID) (peer.AddrInfo, error)            `perm:"read"`
		NetFindProvidersAsync       func(ctx context.Context, key cid.Cid, count int) <-chan peer.AddrInfo `perm:"read"`
		NetGetClosestPeers          func(ctx context.Context, key string) ([]peer.ID, error)               `perm:"read"`
		NetPeerInfo                 func(ctx context.Context, p peer.ID) (*types.ExtendedPeerInfo, error)  `perm:"read"`
		NetPeers                    func(ctx context.Context) ([]peer.AddrInfo, error)                     `perm:"read"`
		NetPing                     func(ctx context.Context, p peer.ID) (time.Duration, error)            `perm:"read"`
		NetProtectAdd               func(ctx context.Context, acl []peer.ID) error                         `perm:"admin"`
		NetProtectList              func(ctx context.Context) ([]peer.ID, error)                           `perm:"read"`
		NetProtectRemove            func(ctx context.Context, acl []peer.ID) error                         `perm:"admin"`
		Version                     func(ctx context.Context) (types.Version, error)                       `perm:"read"`
	}
}

func (s *INetworkStruct) ID(p0 context.Context) (peer.ID, error) { return s.Internal.ID(p0) }
func (s *INetworkStruct) NetAddrsListen(p0 context.Context) (peer.AddrInfo, error) {
	return s.Internal.NetAddrsListen(p0)
}
func (s *INetworkStruct) NetAgentVersion(p0 context.Context, p1 peer.ID) (string, error) {
	return s.Internal.NetAgentVersion(p0, p1)
}
func (s *INetworkStruct) NetAutoNatStatus(p0 context.Context) (types.NatInfo, error) {
	return s.Internal.NetAutoNatStatus(p0)
}
func (s *INetworkStruct) NetBandwidthStats(p0 context.Context) (metrics.Stats, error) {
	return s.Internal.NetBandwidthStats(p0)
}
func (s *INetworkStruct) NetBandwidthStatsByPeer(p0 context.Context) (map[string]metrics.Stats, error) {
	return s.Internal.NetBandwidthStatsByPeer(p0)
}
func (s *INetworkStruct) NetBandwidthStatsByProtocol(p0 context.Context) (map[protocol.ID]metrics.Stats, error) {
	return s.Internal.NetBandwidthStatsByProtocol(p0)
}
func (s *INetworkStruct) NetConnect(p0 context.Context, p1 peer.AddrInfo) error {
	return s.Internal.NetConnect(p0, p1)
}
func (s *INetworkStruct) NetConnectedness(p0 context.Context, p1 peer.ID) (network2.Connectedness, error) {
	return s.Internal.NetConnectedness(p0, p1)
}
func (s *INetworkStruct) NetDisconnect(p0 context.Context, p1 peer.ID) error {
	return s.Internal.NetDisconnect(p0, p1)
}
func (s *INetworkStruct) NetFindPeer(p0 context.Context, p1 peer.ID) (peer.AddrInfo, error) {
	return s.Internal.NetFindPeer(p0, p1)
}
func (s *INetworkStruct) NetFindProvidersAsync(p0 context.Context, p1 cid.Cid, p2 int) <-chan peer.AddrInfo {
	return s.Internal.NetFindProvidersAsync(p0, p1, p2)
}
func (s *INetworkStruct) NetGetClosestPeers(p0 context.Context, p1 string) ([]peer.ID, error) {
	return s.Internal.NetGetClosestPeers(p0, p1)
}
func (s *INetworkStruct) NetPeerInfo(p0 context.Context, p1 peer.ID) (*types.ExtendedPeerInfo, error) {
	return s.Internal.NetPeerInfo(p0, p1)
}
func (s *INetworkStruct) NetPeers(p0 context.Context) ([]peer.AddrInfo, error) {
	return s.Internal.NetPeers(p0)
}
func (s *INetworkStruct) NetPing(p0 context.Context, p1 peer.ID) (time.Duration, error) {
	return s.Internal.NetPing(p0, p1)
}
func (s *INetworkStruct) NetProtectAdd(p0 context.Context, p1 []peer.ID) error {
	return s.Internal.NetProtectAdd(p0, p1)
}
func (s *INetworkStruct) NetProtectList(p0 context.Context) ([]peer.ID, error) {
	return s.Internal.NetProtectList(p0)
}
func (s *INetworkStruct) NetProtectRemove(p0 context.Context, p1 []peer.ID) error {
	return s.Internal.NetProtectRemove(p0, p1)
}
func (s *INetworkStruct) Version(p0 context.Context) (types.Version, error) {
	return s.Internal.Version(p0)
}

type IPaychanStruct struct {
	Internal struct {
		PaychAllocateLane           func(ctx context.Context, ch address.Address) (uint64, error)                                                           `perm:"sign"`
		PaychAvailableFunds         func(ctx context.Context, ch address.Address) (*types.ChannelAvailableFunds, error)                                     `perm:"sign"`
		PaychAvailableFundsByFromTo func(ctx context.Context, from, to address.Address) (*types.ChannelAvailableFunds, error)                               `perm:"sign"`
		PaychCollect                func(ctx context.Context, addr address.Address) (cid.Cid, error)                                                        `perm:"sign"`
		PaychGet                    func(ctx context.Context, from, to address.Address, amt big.Int) (*types.ChannelInfo, error)                            `perm:"sign"`
		PaychGetWaitReady           func(ctx context.Context, sentinel cid.Cid) (address.Address, error)                                                    `perm:"sign"`
		PaychList                   func(ctx context.Context) ([]address.Address, error)                                                                    `perm:"read"`
		PaychNewPayment             func(ctx context.Context, from, to address.Address, vouchers []types.VoucherSpec) (*types.PaymentInfo, error)           `perm:"sign"`
		PaychSettle                 func(ctx context.Context, addr address.Address) (cid.Cid, error)                                                        `perm:"sign"`
		PaychStatus                 func(ctx context.Context, pch address.Address) (*types.Status, error)                                                   `perm:"read"`
		PaychVoucherAdd             func(ctx context.Context, ch address.Address, sv *types.SignedVoucher, proof []byte, minDelta big.Int) (big.Int, error) `perm:"write"`
		PaychVoucherCheckSpendable  func(ctx context.Context, ch address.Address, sv *types.SignedVoucher, secret []byte, proof []byte) (bool, error)       `perm:"read"`
		PaychVoucherCheckValid      func(ctx context.Context, ch address.Address, sv *types.SignedVoucher) error                                            `perm:"read"`
		PaychVoucherCreate          func(ctx context.Context, pch address.Address, amt big.Int, lane uint64) (*types.VoucherCreateResult, error)            `perm:"sign"`
		PaychVoucherList            func(ctx context.Context, pch address.Address) ([]*types.SignedVoucher, error)                                          `perm:"write"`
		PaychVoucherSubmit          func(ctx context.Context, ch address.Address, sv *types.SignedVoucher, secret []byte, proof []byte) (cid.Cid, error)    `perm:"sign"`
	}
}

func (s *IPaychanStruct) PaychAllocateLane(p0 context.Context, p1 address.Address) (uint64, error) {
	return s.Internal.PaychAllocateLane(p0, p1)
}
func (s *IPaychanStruct) PaychAvailableFunds(p0 context.Context, p1 address.Address) (*types.ChannelAvailableFunds, error) {
	return s.Internal.PaychAvailableFunds(p0, p1)
}
func (s *IPaychanStruct) PaychAvailableFundsByFromTo(p0 context.Context, p1, p2 address.Address) (*types.ChannelAvailableFunds, error) {
	return s.Internal.PaychAvailableFundsByFromTo(p0, p1, p2)
}
func (s *IPaychanStruct) PaychCollect(p0 context.Context, p1 address.Address) (cid.Cid, error) {
	return s.Internal.PaychCollect(p0, p1)
}
func (s *IPaychanStruct) PaychGet(p0 context.Context, p1, p2 address.Address, p3 big.Int) (*types.ChannelInfo, error) {
	return s.Internal.PaychGet(p0, p1, p2, p3)
}
func (s *IPaychanStruct) PaychGetWaitReady(p0 context.Context, p1 cid.Cid) (address.Address, error) {
	return s.Internal.PaychGetWaitReady(p0, p1)
}
func (s *IPaychanStruct) PaychList(p0 context.Context) ([]address.Address, error) {
	return s.Internal.PaychList(p0)
}
func (s *IPaychanStruct) PaychNewPayment(p0 context.Context, p1, p2 address.Address, p3 []types.VoucherSpec) (*types.PaymentInfo, error) {
	return s.Internal.PaychNewPayment(p0, p1, p2, p3)
}
func (s *IPaychanStruct) PaychSettle(p0 context.Context, p1 address.Address) (cid.Cid, error) {
	return s.Internal.PaychSettle(p0, p1)
}
func (s *IPaychanStruct) PaychStatus(p0 context.Context, p1 address.Address) (*types.Status, error) {
	return s.Internal.PaychStatus(p0, p1)
}
func (s *IPaychanStruct) PaychVoucherAdd(p0 context.Context, p1 address.Address, p2 *types.SignedVoucher, p3 []byte, p4 big.Int) (big.Int, error) {
	return s.Internal.PaychVoucherAdd(p0, p1, p2, p3, p4)
}
func (s *IPaychanStruct) PaychVoucherCheckSpendable(p0 context.Context, p1 address.Address, p2 *types.SignedVoucher, p3 []byte, p4 []byte) (bool, error) {
	return s.Internal.PaychVoucherCheckSpendable(p0, p1, p2, p3, p4)
}
func (s *IPaychanStruct) PaychVoucherCheckValid(p0 context.Context, p1 address.Address, p2 *types.SignedVoucher) error {
	return s.Internal.PaychVoucherCheckValid(p0, p1, p2)
}
func (s *IPaychanStruct) PaychVoucherCreate(p0 context.Context, p1 address.Address, p2 big.Int, p3 uint64) (*types.VoucherCreateResult, error) {
	return s.Internal.PaychVoucherCreate(p0, p1, p2, p3)
}
func (s *IPaychanStruct) PaychVoucherList(p0 context.Context, p1 address.Address) ([]*types.SignedVoucher, error) {
	return s.Internal.PaychVoucherList(p0, p1)
}
func (s *IPaychanStruct) PaychVoucherSubmit(p0 context.Context, p1 address.Address, p2 *types.SignedVoucher, p3 []byte, p4 []byte) (cid.Cid, error) {
	return s.Internal.PaychVoucherSubmit(p0, p1, p2, p3, p4)
}

type ISyncerStruct struct {
	Internal struct {
		ChainSyncHandleNewTipSet func(ctx context.Context, ci *types.ChainInfo) error                                           `perm:"write"`
		ChainTipSetWeight        func(ctx context.Context, tsk types.TipSetKey) (big.Int, error)                                `perm:"read"`
		Concurrent               func(ctx context.Context) int64                                                                `perm:"read"`
		SetConcurrent            func(ctx context.Context, concurrent int64) error                                              `perm:"admin"`
		StateCall                func(ctx context.Context, msg *types.Message, tsk types.TipSetKey) (*types.InvocResult, error) `perm:"read"`
		SyncState                func(ctx context.Context) (*types.SyncState, error)                                            `perm:"read"`
		SyncSubmitBlock          func(ctx context.Context, blk *types.BlockMsg) error                                           `perm:"write"`
		SyncerTracker            func(ctx context.Context) *types.TargetTracker                                                 `perm:"read"`
	}
}

func (s *ISyncerStruct) ChainSyncHandleNewTipSet(p0 context.Context, p1 *types.ChainInfo) error {
	return s.Internal.ChainSyncHandleNewTipSet(p0, p1)
}
func (s *ISyncerStruct) ChainTipSetWeight(p0 context.Context, p1 types.TipSetKey) (big.Int, error) {
	return s.Internal.ChainTipSetWeight(p0, p1)
}
func (s *ISyncerStruct) Concurrent(p0 context.Context) int64 { return s.Internal.Concurrent(p0) }
func (s *ISyncerStruct) SetConcurrent(p0 context.Context, p1 int64) error {
	return s.Internal.SetConcurrent(p0, p1)
}
func (s *ISyncerStruct) StateCall(p0 context.Context, p1 *types.Message, p2 types.TipSetKey) (*types.InvocResult, error) {
	return s.Internal.StateCall(p0, p1, p2)
}
func (s *ISyncerStruct) SyncState(p0 context.Context) (*types.SyncState, error) {
	return s.Internal.SyncState(p0)
}
func (s *ISyncerStruct) SyncSubmitBlock(p0 context.Context, p1 *types.BlockMsg) error {
	return s.Internal.SyncSubmitBlock(p0, p1)
}
func (s *ISyncerStruct) SyncerTracker(p0 context.Context) *types.TargetTracker {
	return s.Internal.SyncerTracker(p0)
}

type IWalletStruct struct {
	Internal struct {
		HasPassword          func(ctx context.Context) bool                                                                          `perm:"admin"`
		LockWallet           func(ctx context.Context) error                                                                         `perm:"admin"`
		SetPassword          func(ctx context.Context, password []byte) error                                                        `perm:"admin"`
		UnLockWallet         func(ctx context.Context, password []byte) error                                                        `perm:"admin"`
		WalletAddresses      func(ctx context.Context) []address.Address                                                             `perm:"admin"`
		WalletBalance        func(ctx context.Context, addr address.Address) (abi.TokenAmount, error)                                `perm:"read"`
		WalletDefaultAddress func(ctx context.Context) (address.Address, error)                                                      `perm:"write"`
		WalletExport         func(ctx context.Context, addr address.Address, password string) (*types.KeyInfo, error)                `perm:"admin"`
		WalletHas            func(ctx context.Context, addr address.Address) (bool, error)                                           `perm:"write"`
		WalletImport         func(ctx context.Context, key *types.KeyInfo) (address.Address, error)                                  `perm:"admin"`
		WalletNewAddress     func(ctx context.Context, protocol address.Protocol) (address.Address, error)                           `perm:"write"`
		WalletSetDefault     func(ctx context.Context, addr address.Address) error                                                   `perm:"write"`
		WalletSign           func(ctx context.Context, k address.Address, msg []byte, meta types.MsgMeta) (*crypto.Signature, error) `perm:"sign"`
		WalletSignMessage    func(ctx context.Context, k address.Address, msg *types.Message) (*types.SignedMessage, error)          `perm:"sign"`
		WalletState          func(ctx context.Context) int                                                                           `perm:"admin"`
	}
}

func (s *IWalletStruct) HasPassword(p0 context.Context) bool { return s.Internal.HasPassword(p0) }
func (s *IWalletStruct) LockWallet(p0 context.Context) error { return s.Internal.LockWallet(p0) }
func (s *IWalletStruct) SetPassword(p0 context.Context, p1 []byte) error {
	return s.Internal.SetPassword(p0, p1)
}
func (s *IWalletStruct) UnLockWallet(p0 context.Context, p1 []byte) error {
	return s.Internal.UnLockWallet(p0, p1)
}
func (s *IWalletStruct) WalletAddresses(p0 context.Context) []address.Address {
	return s.Internal.WalletAddresses(p0)
}
func (s *IWalletStruct) WalletBalance(p0 context.Context, p1 address.Address) (abi.TokenAmount, error) {
	return s.Internal.WalletBalance(p0, p1)
}
func (s *IWalletStruct) WalletDefaultAddress(p0 context.Context) (address.Address, error) {
	return s.Internal.WalletDefaultAddress(p0)
}
func (s *IWalletStruct) WalletExport(p0 context.Context, p1 address.Address, p2 string) (*types.KeyInfo, error) {
	return s.Internal.WalletExport(p0, p1, p2)
}
func (s *IWalletStruct) WalletHas(p0 context.Context, p1 address.Address) (bool, error) {
	return s.Internal.WalletHas(p0, p1)
}
func (s *IWalletStruct) WalletImport(p0 context.Context, p1 *types.KeyInfo) (address.Address, error) {
	return s.Internal.WalletImport(p0, p1)
}
func (s *IWalletStruct) WalletNewAddress(p0 context.Context, p1 address.Protocol) (address.Address, error) {
	return s.Internal.WalletNewAddress(p0, p1)
}
func (s *IWalletStruct) WalletSetDefault(p0 context.Context, p1 address.Address) error {
	return s.Internal.WalletSetDefault(p0, p1)
}
func (s *IWalletStruct) WalletSign(p0 context.Context, p1 address.Address, p2 []byte, p3 types.MsgMeta) (*crypto.Signature, error) {
	return s.Internal.WalletSign(p0, p1, p2, p3)
}
func (s *IWalletStruct) WalletSignMessage(p0 context.Context, p1 address.Address, p2 *types.Message) (*types.SignedMessage, error) {
	return s.Internal.WalletSignMessage(p0, p1, p2)
}
func (s *IWalletStruct) WalletState(p0 context.Context) int { return s.Internal.WalletState(p0) }

type FullNodeStruct struct {
	IBlockStoreStruct
	IChainStruct
	IMarketStruct
	IMiningStruct
	IMessagePoolStruct
	IMultiSigStruct
	INetworkStruct
	IPaychanStruct
	ISyncerStruct
	IWalletStruct
}
