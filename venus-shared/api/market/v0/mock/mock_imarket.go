// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/venus/venus-shared/api/market/v0 (interfaces: IMarket)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	address "github.com/filecoin-project/go-address"
	datatransfer "github.com/filecoin-project/go-data-transfer"
	piecestore "github.com/filecoin-project/go-fil-markets/piecestore"
	retrievalmarket "github.com/filecoin-project/go-fil-markets/retrievalmarket"
	abi "github.com/filecoin-project/go-state-types/abi"
	big "github.com/filecoin-project/go-state-types/big"
	paych "github.com/filecoin-project/go-state-types/builtin/v8/paych"
	types "github.com/filecoin-project/venus/venus-shared/actors/types"
	types0 "github.com/filecoin-project/venus/venus-shared/types"
	gateway "github.com/filecoin-project/venus/venus-shared/types/gateway"
	market "github.com/filecoin-project/venus/venus-shared/types/market"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
	peer "github.com/libp2p/go-libp2p/core/peer"
)

// MockIMarket is a mock of IMarket interface.
type MockIMarket struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketMockRecorder
}

// MockIMarketMockRecorder is the mock recorder for MockIMarket.
type MockIMarketMockRecorder struct {
	mock *MockIMarket
}

// NewMockIMarket creates a new mock instance.
func NewMockIMarket(ctrl *gomock.Controller) *MockIMarket {
	mock := &MockIMarket{ctrl: ctrl}
	mock.recorder = &MockIMarketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarket) EXPECT() *MockIMarketMockRecorder {
	return m.recorder
}

// ActorExist mocks base method.
func (m *MockIMarket) ActorExist(arg0 context.Context, arg1 address.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorExist indicates an expected call of ActorExist.
func (mr *MockIMarketMockRecorder) ActorExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorExist", reflect.TypeOf((*MockIMarket)(nil).ActorExist), arg0, arg1)
}

// ActorList mocks base method.
func (m *MockIMarket) ActorList(arg0 context.Context) ([]market.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorList", arg0)
	ret0, _ := ret[0].([]market.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorList indicates an expected call of ActorList.
func (mr *MockIMarketMockRecorder) ActorList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorList", reflect.TypeOf((*MockIMarket)(nil).ActorList), arg0)
}

// ActorSectorSize mocks base method.
func (m *MockIMarket) ActorSectorSize(arg0 context.Context, arg1 address.Address) (abi.SectorSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorSectorSize", arg0, arg1)
	ret0, _ := ret[0].(abi.SectorSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorSectorSize indicates an expected call of ActorSectorSize.
func (mr *MockIMarketMockRecorder) ActorSectorSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorSectorSize", reflect.TypeOf((*MockIMarket)(nil).ActorSectorSize), arg0, arg1)
}

// AddFsPieceStorage mocks base method.
func (m *MockIMarket) AddFsPieceStorage(arg0 context.Context, arg1, arg2 string, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFsPieceStorage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFsPieceStorage indicates an expected call of AddFsPieceStorage.
func (mr *MockIMarketMockRecorder) AddFsPieceStorage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFsPieceStorage", reflect.TypeOf((*MockIMarket)(nil).AddFsPieceStorage), arg0, arg1, arg2, arg3)
}

// AddS3PieceStorage mocks base method.
func (m *MockIMarket) AddS3PieceStorage(arg0 context.Context, arg1, arg2, arg3, arg4, arg5, arg6, arg7 string, arg8 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddS3PieceStorage", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddS3PieceStorage indicates an expected call of AddS3PieceStorage.
func (mr *MockIMarketMockRecorder) AddS3PieceStorage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddS3PieceStorage", reflect.TypeOf((*MockIMarket)(nil).AddS3PieceStorage), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// AssignUnPackedDeals mocks base method.
func (m *MockIMarket) AssignUnPackedDeals(arg0 context.Context, arg1 abi.SectorID, arg2 abi.SectorSize, arg3 *market.GetDealSpec) ([]*market.DealInfoIncludePath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUnPackedDeals", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*market.DealInfoIncludePath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUnPackedDeals indicates an expected call of AssignUnPackedDeals.
func (mr *MockIMarketMockRecorder) AssignUnPackedDeals(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUnPackedDeals", reflect.TypeOf((*MockIMarket)(nil).AssignUnPackedDeals), arg0, arg1, arg2, arg3)
}

// DagstoreGC mocks base method.
func (m *MockIMarket) DagstoreGC(arg0 context.Context) ([]market.DagstoreShardResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DagstoreGC", arg0)
	ret0, _ := ret[0].([]market.DagstoreShardResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DagstoreGC indicates an expected call of DagstoreGC.
func (mr *MockIMarketMockRecorder) DagstoreGC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DagstoreGC", reflect.TypeOf((*MockIMarket)(nil).DagstoreGC), arg0)
}

// DagstoreInitializeAll mocks base method.
func (m *MockIMarket) DagstoreInitializeAll(arg0 context.Context, arg1 market.DagstoreInitializeAllParams) (<-chan market.DagstoreInitializeAllEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DagstoreInitializeAll", arg0, arg1)
	ret0, _ := ret[0].(<-chan market.DagstoreInitializeAllEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DagstoreInitializeAll indicates an expected call of DagstoreInitializeAll.
func (mr *MockIMarketMockRecorder) DagstoreInitializeAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DagstoreInitializeAll", reflect.TypeOf((*MockIMarket)(nil).DagstoreInitializeAll), arg0, arg1)
}

// DagstoreInitializeShard mocks base method.
func (m *MockIMarket) DagstoreInitializeShard(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DagstoreInitializeShard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DagstoreInitializeShard indicates an expected call of DagstoreInitializeShard.
func (mr *MockIMarketMockRecorder) DagstoreInitializeShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DagstoreInitializeShard", reflect.TypeOf((*MockIMarket)(nil).DagstoreInitializeShard), arg0, arg1)
}

// DagstoreInitializeStorage mocks base method.
func (m *MockIMarket) DagstoreInitializeStorage(arg0 context.Context, arg1 string, arg2 market.DagstoreInitializeAllParams) (<-chan market.DagstoreInitializeAllEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DagstoreInitializeStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan market.DagstoreInitializeAllEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DagstoreInitializeStorage indicates an expected call of DagstoreInitializeStorage.
func (mr *MockIMarketMockRecorder) DagstoreInitializeStorage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DagstoreInitializeStorage", reflect.TypeOf((*MockIMarket)(nil).DagstoreInitializeStorage), arg0, arg1, arg2)
}

// DagstoreListShards mocks base method.
func (m *MockIMarket) DagstoreListShards(arg0 context.Context) ([]market.DagstoreShardInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DagstoreListShards", arg0)
	ret0, _ := ret[0].([]market.DagstoreShardInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DagstoreListShards indicates an expected call of DagstoreListShards.
func (mr *MockIMarketMockRecorder) DagstoreListShards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DagstoreListShards", reflect.TypeOf((*MockIMarket)(nil).DagstoreListShards), arg0)
}

// DagstoreRecoverShard mocks base method.
func (m *MockIMarket) DagstoreRecoverShard(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DagstoreRecoverShard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DagstoreRecoverShard indicates an expected call of DagstoreRecoverShard.
func (mr *MockIMarketMockRecorder) DagstoreRecoverShard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DagstoreRecoverShard", reflect.TypeOf((*MockIMarket)(nil).DagstoreRecoverShard), arg0, arg1)
}

// DealsConsiderOfflineRetrievalDeals mocks base method.
func (m *MockIMarket) DealsConsiderOfflineRetrievalDeals(arg0 context.Context, arg1 address.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsConsiderOfflineRetrievalDeals", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsConsiderOfflineRetrievalDeals indicates an expected call of DealsConsiderOfflineRetrievalDeals.
func (mr *MockIMarketMockRecorder) DealsConsiderOfflineRetrievalDeals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsConsiderOfflineRetrievalDeals", reflect.TypeOf((*MockIMarket)(nil).DealsConsiderOfflineRetrievalDeals), arg0, arg1)
}

// DealsConsiderOfflineStorageDeals mocks base method.
func (m *MockIMarket) DealsConsiderOfflineStorageDeals(arg0 context.Context, arg1 address.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsConsiderOfflineStorageDeals", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsConsiderOfflineStorageDeals indicates an expected call of DealsConsiderOfflineStorageDeals.
func (mr *MockIMarketMockRecorder) DealsConsiderOfflineStorageDeals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsConsiderOfflineStorageDeals", reflect.TypeOf((*MockIMarket)(nil).DealsConsiderOfflineStorageDeals), arg0, arg1)
}

// DealsConsiderOnlineRetrievalDeals mocks base method.
func (m *MockIMarket) DealsConsiderOnlineRetrievalDeals(arg0 context.Context, arg1 address.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsConsiderOnlineRetrievalDeals", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsConsiderOnlineRetrievalDeals indicates an expected call of DealsConsiderOnlineRetrievalDeals.
func (mr *MockIMarketMockRecorder) DealsConsiderOnlineRetrievalDeals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsConsiderOnlineRetrievalDeals", reflect.TypeOf((*MockIMarket)(nil).DealsConsiderOnlineRetrievalDeals), arg0, arg1)
}

// DealsConsiderOnlineStorageDeals mocks base method.
func (m *MockIMarket) DealsConsiderOnlineStorageDeals(arg0 context.Context, arg1 address.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsConsiderOnlineStorageDeals", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsConsiderOnlineStorageDeals indicates an expected call of DealsConsiderOnlineStorageDeals.
func (mr *MockIMarketMockRecorder) DealsConsiderOnlineStorageDeals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsConsiderOnlineStorageDeals", reflect.TypeOf((*MockIMarket)(nil).DealsConsiderOnlineStorageDeals), arg0, arg1)
}

// DealsConsiderUnverifiedStorageDeals mocks base method.
func (m *MockIMarket) DealsConsiderUnverifiedStorageDeals(arg0 context.Context, arg1 address.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsConsiderUnverifiedStorageDeals", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsConsiderUnverifiedStorageDeals indicates an expected call of DealsConsiderUnverifiedStorageDeals.
func (mr *MockIMarketMockRecorder) DealsConsiderUnverifiedStorageDeals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsConsiderUnverifiedStorageDeals", reflect.TypeOf((*MockIMarket)(nil).DealsConsiderUnverifiedStorageDeals), arg0, arg1)
}

// DealsConsiderVerifiedStorageDeals mocks base method.
func (m *MockIMarket) DealsConsiderVerifiedStorageDeals(arg0 context.Context, arg1 address.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsConsiderVerifiedStorageDeals", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsConsiderVerifiedStorageDeals indicates an expected call of DealsConsiderVerifiedStorageDeals.
func (mr *MockIMarketMockRecorder) DealsConsiderVerifiedStorageDeals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsConsiderVerifiedStorageDeals", reflect.TypeOf((*MockIMarket)(nil).DealsConsiderVerifiedStorageDeals), arg0, arg1)
}

// DealsImportData mocks base method.
func (m *MockIMarket) DealsImportData(arg0 context.Context, arg1 cid.Cid, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsImportData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsImportData indicates an expected call of DealsImportData.
func (mr *MockIMarketMockRecorder) DealsImportData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsImportData", reflect.TypeOf((*MockIMarket)(nil).DealsImportData), arg0, arg1, arg2)
}

// DealsMaxProviderCollateralMultiplier mocks base method.
func (m *MockIMarket) DealsMaxProviderCollateralMultiplier(arg0 context.Context, arg1 address.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsMaxProviderCollateralMultiplier", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsMaxProviderCollateralMultiplier indicates an expected call of DealsMaxProviderCollateralMultiplier.
func (mr *MockIMarketMockRecorder) DealsMaxProviderCollateralMultiplier(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsMaxProviderCollateralMultiplier", reflect.TypeOf((*MockIMarket)(nil).DealsMaxProviderCollateralMultiplier), arg0, arg1)
}

// DealsMaxPublishFee mocks base method.
func (m *MockIMarket) DealsMaxPublishFee(arg0 context.Context, arg1 address.Address) (types.FIL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsMaxPublishFee", arg0, arg1)
	ret0, _ := ret[0].(types.FIL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsMaxPublishFee indicates an expected call of DealsMaxPublishFee.
func (mr *MockIMarketMockRecorder) DealsMaxPublishFee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsMaxPublishFee", reflect.TypeOf((*MockIMarket)(nil).DealsMaxPublishFee), arg0, arg1)
}

// DealsMaxStartDelay mocks base method.
func (m *MockIMarket) DealsMaxStartDelay(arg0 context.Context, arg1 address.Address) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsMaxStartDelay", arg0, arg1)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsMaxStartDelay indicates an expected call of DealsMaxStartDelay.
func (mr *MockIMarketMockRecorder) DealsMaxStartDelay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsMaxStartDelay", reflect.TypeOf((*MockIMarket)(nil).DealsMaxStartDelay), arg0, arg1)
}

// DealsPieceCidBlocklist mocks base method.
func (m *MockIMarket) DealsPieceCidBlocklist(arg0 context.Context, arg1 address.Address) ([]cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsPieceCidBlocklist", arg0, arg1)
	ret0, _ := ret[0].([]cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsPieceCidBlocklist indicates an expected call of DealsPieceCidBlocklist.
func (mr *MockIMarketMockRecorder) DealsPieceCidBlocklist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsPieceCidBlocklist", reflect.TypeOf((*MockIMarket)(nil).DealsPieceCidBlocklist), arg0, arg1)
}

// DealsPublishMsgPeriod mocks base method.
func (m *MockIMarket) DealsPublishMsgPeriod(arg0 context.Context, arg1 address.Address) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsPublishMsgPeriod", arg0, arg1)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DealsPublishMsgPeriod indicates an expected call of DealsPublishMsgPeriod.
func (mr *MockIMarketMockRecorder) DealsPublishMsgPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsPublishMsgPeriod", reflect.TypeOf((*MockIMarket)(nil).DealsPublishMsgPeriod), arg0, arg1)
}

// DealsSetConsiderOfflineRetrievalDeals mocks base method.
func (m *MockIMarket) DealsSetConsiderOfflineRetrievalDeals(arg0 context.Context, arg1 address.Address, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetConsiderOfflineRetrievalDeals", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetConsiderOfflineRetrievalDeals indicates an expected call of DealsSetConsiderOfflineRetrievalDeals.
func (mr *MockIMarketMockRecorder) DealsSetConsiderOfflineRetrievalDeals(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetConsiderOfflineRetrievalDeals", reflect.TypeOf((*MockIMarket)(nil).DealsSetConsiderOfflineRetrievalDeals), arg0, arg1, arg2)
}

// DealsSetConsiderOfflineStorageDeals mocks base method.
func (m *MockIMarket) DealsSetConsiderOfflineStorageDeals(arg0 context.Context, arg1 address.Address, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetConsiderOfflineStorageDeals", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetConsiderOfflineStorageDeals indicates an expected call of DealsSetConsiderOfflineStorageDeals.
func (mr *MockIMarketMockRecorder) DealsSetConsiderOfflineStorageDeals(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetConsiderOfflineStorageDeals", reflect.TypeOf((*MockIMarket)(nil).DealsSetConsiderOfflineStorageDeals), arg0, arg1, arg2)
}

// DealsSetConsiderOnlineRetrievalDeals mocks base method.
func (m *MockIMarket) DealsSetConsiderOnlineRetrievalDeals(arg0 context.Context, arg1 address.Address, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetConsiderOnlineRetrievalDeals", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetConsiderOnlineRetrievalDeals indicates an expected call of DealsSetConsiderOnlineRetrievalDeals.
func (mr *MockIMarketMockRecorder) DealsSetConsiderOnlineRetrievalDeals(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetConsiderOnlineRetrievalDeals", reflect.TypeOf((*MockIMarket)(nil).DealsSetConsiderOnlineRetrievalDeals), arg0, arg1, arg2)
}

// DealsSetConsiderOnlineStorageDeals mocks base method.
func (m *MockIMarket) DealsSetConsiderOnlineStorageDeals(arg0 context.Context, arg1 address.Address, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetConsiderOnlineStorageDeals", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetConsiderOnlineStorageDeals indicates an expected call of DealsSetConsiderOnlineStorageDeals.
func (mr *MockIMarketMockRecorder) DealsSetConsiderOnlineStorageDeals(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetConsiderOnlineStorageDeals", reflect.TypeOf((*MockIMarket)(nil).DealsSetConsiderOnlineStorageDeals), arg0, arg1, arg2)
}

// DealsSetConsiderUnverifiedStorageDeals mocks base method.
func (m *MockIMarket) DealsSetConsiderUnverifiedStorageDeals(arg0 context.Context, arg1 address.Address, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetConsiderUnverifiedStorageDeals", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetConsiderUnverifiedStorageDeals indicates an expected call of DealsSetConsiderUnverifiedStorageDeals.
func (mr *MockIMarketMockRecorder) DealsSetConsiderUnverifiedStorageDeals(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetConsiderUnverifiedStorageDeals", reflect.TypeOf((*MockIMarket)(nil).DealsSetConsiderUnverifiedStorageDeals), arg0, arg1, arg2)
}

// DealsSetConsiderVerifiedStorageDeals mocks base method.
func (m *MockIMarket) DealsSetConsiderVerifiedStorageDeals(arg0 context.Context, arg1 address.Address, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetConsiderVerifiedStorageDeals", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetConsiderVerifiedStorageDeals indicates an expected call of DealsSetConsiderVerifiedStorageDeals.
func (mr *MockIMarketMockRecorder) DealsSetConsiderVerifiedStorageDeals(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetConsiderVerifiedStorageDeals", reflect.TypeOf((*MockIMarket)(nil).DealsSetConsiderVerifiedStorageDeals), arg0, arg1, arg2)
}

// DealsSetMaxProviderCollateralMultiplier mocks base method.
func (m *MockIMarket) DealsSetMaxProviderCollateralMultiplier(arg0 context.Context, arg1 address.Address, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetMaxProviderCollateralMultiplier", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetMaxProviderCollateralMultiplier indicates an expected call of DealsSetMaxProviderCollateralMultiplier.
func (mr *MockIMarketMockRecorder) DealsSetMaxProviderCollateralMultiplier(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetMaxProviderCollateralMultiplier", reflect.TypeOf((*MockIMarket)(nil).DealsSetMaxProviderCollateralMultiplier), arg0, arg1, arg2)
}

// DealsSetMaxPublishFee mocks base method.
func (m *MockIMarket) DealsSetMaxPublishFee(arg0 context.Context, arg1 address.Address, arg2 types.FIL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetMaxPublishFee", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetMaxPublishFee indicates an expected call of DealsSetMaxPublishFee.
func (mr *MockIMarketMockRecorder) DealsSetMaxPublishFee(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetMaxPublishFee", reflect.TypeOf((*MockIMarket)(nil).DealsSetMaxPublishFee), arg0, arg1, arg2)
}

// DealsSetMaxStartDelay mocks base method.
func (m *MockIMarket) DealsSetMaxStartDelay(arg0 context.Context, arg1 address.Address, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetMaxStartDelay", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetMaxStartDelay indicates an expected call of DealsSetMaxStartDelay.
func (mr *MockIMarketMockRecorder) DealsSetMaxStartDelay(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetMaxStartDelay", reflect.TypeOf((*MockIMarket)(nil).DealsSetMaxStartDelay), arg0, arg1, arg2)
}

// DealsSetPieceCidBlocklist mocks base method.
func (m *MockIMarket) DealsSetPieceCidBlocklist(arg0 context.Context, arg1 address.Address, arg2 []cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetPieceCidBlocklist", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetPieceCidBlocklist indicates an expected call of DealsSetPieceCidBlocklist.
func (mr *MockIMarketMockRecorder) DealsSetPieceCidBlocklist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetPieceCidBlocklist", reflect.TypeOf((*MockIMarket)(nil).DealsSetPieceCidBlocklist), arg0, arg1, arg2)
}

// DealsSetPublishMsgPeriod mocks base method.
func (m *MockIMarket) DealsSetPublishMsgPeriod(arg0 context.Context, arg1 address.Address, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DealsSetPublishMsgPeriod", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DealsSetPublishMsgPeriod indicates an expected call of DealsSetPublishMsgPeriod.
func (mr *MockIMarketMockRecorder) DealsSetPublishMsgPeriod(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DealsSetPublishMsgPeriod", reflect.TypeOf((*MockIMarket)(nil).DealsSetPublishMsgPeriod), arg0, arg1, arg2)
}

// GetDeals mocks base method.
func (m *MockIMarket) GetDeals(arg0 context.Context, arg1 address.Address, arg2, arg3 int) ([]*market.DealInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeals", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*market.DealInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeals indicates an expected call of GetDeals.
func (mr *MockIMarketMockRecorder) GetDeals(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeals", reflect.TypeOf((*MockIMarket)(nil).GetDeals), arg0, arg1, arg2, arg3)
}

// GetRetrievalDealStatistic mocks base method.
func (m *MockIMarket) GetRetrievalDealStatistic(arg0 context.Context, arg1 address.Address) (*market.RetrievalDealStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetrievalDealStatistic", arg0, arg1)
	ret0, _ := ret[0].(*market.RetrievalDealStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetrievalDealStatistic indicates an expected call of GetRetrievalDealStatistic.
func (mr *MockIMarketMockRecorder) GetRetrievalDealStatistic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetrievalDealStatistic", reflect.TypeOf((*MockIMarket)(nil).GetRetrievalDealStatistic), arg0, arg1)
}

// GetStorageDealStatistic mocks base method.
func (m *MockIMarket) GetStorageDealStatistic(arg0 context.Context, arg1 address.Address) (*market.StorageDealStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageDealStatistic", arg0, arg1)
	ret0, _ := ret[0].(*market.StorageDealStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageDealStatistic indicates an expected call of GetStorageDealStatistic.
func (mr *MockIMarketMockRecorder) GetStorageDealStatistic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageDealStatistic", reflect.TypeOf((*MockIMarket)(nil).GetStorageDealStatistic), arg0, arg1)
}

// GetUnPackedDeals mocks base method.
func (m *MockIMarket) GetUnPackedDeals(arg0 context.Context, arg1 address.Address, arg2 *market.GetDealSpec) ([]*market.DealInfoIncludePath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnPackedDeals", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*market.DealInfoIncludePath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnPackedDeals indicates an expected call of GetUnPackedDeals.
func (mr *MockIMarketMockRecorder) GetUnPackedDeals(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnPackedDeals", reflect.TypeOf((*MockIMarket)(nil).GetUnPackedDeals), arg0, arg1, arg2)
}

// ID mocks base method.
func (m *MockIMarket) ID(arg0 context.Context) (peer.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID", arg0)
	ret0, _ := ret[0].(peer.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ID indicates an expected call of ID.
func (mr *MockIMarketMockRecorder) ID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockIMarket)(nil).ID), arg0)
}

// ListPieceStorageInfos mocks base method.
func (m *MockIMarket) ListPieceStorageInfos(arg0 context.Context) market.PieceStorageInfos {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPieceStorageInfos", arg0)
	ret0, _ := ret[0].(market.PieceStorageInfos)
	return ret0
}

// ListPieceStorageInfos indicates an expected call of ListPieceStorageInfos.
func (mr *MockIMarketMockRecorder) ListPieceStorageInfos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPieceStorageInfos", reflect.TypeOf((*MockIMarket)(nil).ListPieceStorageInfos), arg0)
}

// ListenMarketEvent mocks base method.
func (m *MockIMarket) ListenMarketEvent(arg0 context.Context, arg1 *gateway.MarketRegisterPolicy) (<-chan *gateway.RequestEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenMarketEvent", arg0, arg1)
	ret0, _ := ret[0].(<-chan *gateway.RequestEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenMarketEvent indicates an expected call of ListenMarketEvent.
func (mr *MockIMarketMockRecorder) ListenMarketEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenMarketEvent", reflect.TypeOf((*MockIMarket)(nil).ListenMarketEvent), arg0, arg1)
}

// MarkDealsAsPacking mocks base method.
func (m *MockIMarket) MarkDealsAsPacking(arg0 context.Context, arg1 address.Address, arg2 []abi.DealID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDealsAsPacking", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDealsAsPacking indicates an expected call of MarkDealsAsPacking.
func (mr *MockIMarketMockRecorder) MarkDealsAsPacking(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDealsAsPacking", reflect.TypeOf((*MockIMarket)(nil).MarkDealsAsPacking), arg0, arg1, arg2)
}

// MarketAddBalance mocks base method.
func (m *MockIMarket) MarketAddBalance(arg0 context.Context, arg1, arg2 address.Address, arg3 big.Int) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketAddBalance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketAddBalance indicates an expected call of MarketAddBalance.
func (mr *MockIMarketMockRecorder) MarketAddBalance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketAddBalance", reflect.TypeOf((*MockIMarket)(nil).MarketAddBalance), arg0, arg1, arg2, arg3)
}

// MarketCancelDataTransfer mocks base method.
func (m *MockIMarket) MarketCancelDataTransfer(arg0 context.Context, arg1 datatransfer.TransferID, arg2 peer.ID, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketCancelDataTransfer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketCancelDataTransfer indicates an expected call of MarketCancelDataTransfer.
func (mr *MockIMarketMockRecorder) MarketCancelDataTransfer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketCancelDataTransfer", reflect.TypeOf((*MockIMarket)(nil).MarketCancelDataTransfer), arg0, arg1, arg2, arg3)
}

// MarketDataTransferPath mocks base method.
func (m *MockIMarket) MarketDataTransferPath(arg0 context.Context, arg1 address.Address) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketDataTransferPath", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDataTransferPath indicates an expected call of MarketDataTransferPath.
func (mr *MockIMarketMockRecorder) MarketDataTransferPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDataTransferPath", reflect.TypeOf((*MockIMarket)(nil).MarketDataTransferPath), arg0, arg1)
}

// MarketDataTransferUpdates mocks base method.
func (m *MockIMarket) MarketDataTransferUpdates(arg0 context.Context) (<-chan market.DataTransferChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketDataTransferUpdates", arg0)
	ret0, _ := ret[0].(<-chan market.DataTransferChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDataTransferUpdates indicates an expected call of MarketDataTransferUpdates.
func (mr *MockIMarketMockRecorder) MarketDataTransferUpdates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDataTransferUpdates", reflect.TypeOf((*MockIMarket)(nil).MarketDataTransferUpdates), arg0)
}

// MarketGetAsk mocks base method.
func (m *MockIMarket) MarketGetAsk(arg0 context.Context, arg1 address.Address) (*market.SignedStorageAsk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketGetAsk", arg0, arg1)
	ret0, _ := ret[0].(*market.SignedStorageAsk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketGetAsk indicates an expected call of MarketGetAsk.
func (mr *MockIMarketMockRecorder) MarketGetAsk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketGetAsk", reflect.TypeOf((*MockIMarket)(nil).MarketGetAsk), arg0, arg1)
}

// MarketGetDealUpdates mocks base method.
func (m *MockIMarket) MarketGetDealUpdates(arg0 context.Context) (<-chan market.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketGetDealUpdates", arg0)
	ret0, _ := ret[0].(<-chan market.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketGetDealUpdates indicates an expected call of MarketGetDealUpdates.
func (mr *MockIMarketMockRecorder) MarketGetDealUpdates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketGetDealUpdates", reflect.TypeOf((*MockIMarket)(nil).MarketGetDealUpdates), arg0)
}

// MarketGetReserved mocks base method.
func (m *MockIMarket) MarketGetReserved(arg0 context.Context, arg1 address.Address) (big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketGetReserved", arg0, arg1)
	ret0, _ := ret[0].(big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketGetReserved indicates an expected call of MarketGetReserved.
func (mr *MockIMarketMockRecorder) MarketGetReserved(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketGetReserved", reflect.TypeOf((*MockIMarket)(nil).MarketGetReserved), arg0, arg1)
}

// MarketGetRetrievalAsk mocks base method.
func (m *MockIMarket) MarketGetRetrievalAsk(arg0 context.Context, arg1 address.Address) (*retrievalmarket.Ask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketGetRetrievalAsk", arg0, arg1)
	ret0, _ := ret[0].(*retrievalmarket.Ask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketGetRetrievalAsk indicates an expected call of MarketGetRetrievalAsk.
func (mr *MockIMarketMockRecorder) MarketGetRetrievalAsk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketGetRetrievalAsk", reflect.TypeOf((*MockIMarket)(nil).MarketGetRetrievalAsk), arg0, arg1)
}

// MarketImportDealData mocks base method.
func (m *MockIMarket) MarketImportDealData(arg0 context.Context, arg1 cid.Cid, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketImportDealData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketImportDealData indicates an expected call of MarketImportDealData.
func (mr *MockIMarketMockRecorder) MarketImportDealData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketImportDealData", reflect.TypeOf((*MockIMarket)(nil).MarketImportDealData), arg0, arg1, arg2)
}

// MarketImportPublishedDeal mocks base method.
func (m *MockIMarket) MarketImportPublishedDeal(arg0 context.Context, arg1 market.MinerDeal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketImportPublishedDeal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketImportPublishedDeal indicates an expected call of MarketImportPublishedDeal.
func (mr *MockIMarketMockRecorder) MarketImportPublishedDeal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketImportPublishedDeal", reflect.TypeOf((*MockIMarket)(nil).MarketImportPublishedDeal), arg0, arg1)
}

// MarketListDataTransfers mocks base method.
func (m *MockIMarket) MarketListDataTransfers(arg0 context.Context) ([]market.DataTransferChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketListDataTransfers", arg0)
	ret0, _ := ret[0].([]market.DataTransferChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketListDataTransfers indicates an expected call of MarketListDataTransfers.
func (mr *MockIMarketMockRecorder) MarketListDataTransfers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketListDataTransfers", reflect.TypeOf((*MockIMarket)(nil).MarketListDataTransfers), arg0)
}

// MarketListDeals mocks base method.
func (m *MockIMarket) MarketListDeals(arg0 context.Context, arg1 []address.Address) ([]*types0.MarketDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketListDeals", arg0, arg1)
	ret0, _ := ret[0].([]*types0.MarketDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketListDeals indicates an expected call of MarketListDeals.
func (mr *MockIMarketMockRecorder) MarketListDeals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketListDeals", reflect.TypeOf((*MockIMarket)(nil).MarketListDeals), arg0, arg1)
}

// MarketListIncompleteDeals mocks base method.
func (m *MockIMarket) MarketListIncompleteDeals(arg0 context.Context, arg1 address.Address) ([]market.MinerDeal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketListIncompleteDeals", arg0, arg1)
	ret0, _ := ret[0].([]market.MinerDeal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketListIncompleteDeals indicates an expected call of MarketListIncompleteDeals.
func (mr *MockIMarketMockRecorder) MarketListIncompleteDeals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketListIncompleteDeals", reflect.TypeOf((*MockIMarket)(nil).MarketListIncompleteDeals), arg0, arg1)
}

// MarketListRetrievalAsk mocks base method.
func (m *MockIMarket) MarketListRetrievalAsk(arg0 context.Context) ([]*market.RetrievalAsk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketListRetrievalAsk", arg0)
	ret0, _ := ret[0].([]*market.RetrievalAsk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketListRetrievalAsk indicates an expected call of MarketListRetrievalAsk.
func (mr *MockIMarketMockRecorder) MarketListRetrievalAsk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketListRetrievalAsk", reflect.TypeOf((*MockIMarket)(nil).MarketListRetrievalAsk), arg0)
}

// MarketListRetrievalDeals mocks base method.
func (m *MockIMarket) MarketListRetrievalDeals(arg0 context.Context) ([]market.ProviderDealState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketListRetrievalDeals", arg0)
	ret0, _ := ret[0].([]market.ProviderDealState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketListRetrievalDeals indicates an expected call of MarketListRetrievalDeals.
func (mr *MockIMarketMockRecorder) MarketListRetrievalDeals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketListRetrievalDeals", reflect.TypeOf((*MockIMarket)(nil).MarketListRetrievalDeals), arg0)
}

// MarketListStorageAsk mocks base method.
func (m *MockIMarket) MarketListStorageAsk(arg0 context.Context) ([]*market.SignedStorageAsk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketListStorageAsk", arg0)
	ret0, _ := ret[0].([]*market.SignedStorageAsk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketListStorageAsk indicates an expected call of MarketListStorageAsk.
func (mr *MockIMarketMockRecorder) MarketListStorageAsk(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketListStorageAsk", reflect.TypeOf((*MockIMarket)(nil).MarketListStorageAsk), arg0)
}

// MarketMaxBalanceAddFee mocks base method.
func (m *MockIMarket) MarketMaxBalanceAddFee(arg0 context.Context, arg1 address.Address) (types.FIL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketMaxBalanceAddFee", arg0, arg1)
	ret0, _ := ret[0].(types.FIL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketMaxBalanceAddFee indicates an expected call of MarketMaxBalanceAddFee.
func (mr *MockIMarketMockRecorder) MarketMaxBalanceAddFee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketMaxBalanceAddFee", reflect.TypeOf((*MockIMarket)(nil).MarketMaxBalanceAddFee), arg0, arg1)
}

// MarketMaxDealsPerPublishMsg mocks base method.
func (m *MockIMarket) MarketMaxDealsPerPublishMsg(arg0 context.Context, arg1 address.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketMaxDealsPerPublishMsg", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketMaxDealsPerPublishMsg indicates an expected call of MarketMaxDealsPerPublishMsg.
func (mr *MockIMarketMockRecorder) MarketMaxDealsPerPublishMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketMaxDealsPerPublishMsg", reflect.TypeOf((*MockIMarket)(nil).MarketMaxDealsPerPublishMsg), arg0, arg1)
}

// MarketPendingDeals mocks base method.
func (m *MockIMarket) MarketPendingDeals(arg0 context.Context) ([]market.PendingDealInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketPendingDeals", arg0)
	ret0, _ := ret[0].([]market.PendingDealInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketPendingDeals indicates an expected call of MarketPendingDeals.
func (mr *MockIMarketMockRecorder) MarketPendingDeals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketPendingDeals", reflect.TypeOf((*MockIMarket)(nil).MarketPendingDeals), arg0)
}

// MarketPublishPendingDeals mocks base method.
func (m *MockIMarket) MarketPublishPendingDeals(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketPublishPendingDeals", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketPublishPendingDeals indicates an expected call of MarketPublishPendingDeals.
func (mr *MockIMarketMockRecorder) MarketPublishPendingDeals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketPublishPendingDeals", reflect.TypeOf((*MockIMarket)(nil).MarketPublishPendingDeals), arg0)
}

// MarketReleaseFunds mocks base method.
func (m *MockIMarket) MarketReleaseFunds(arg0 context.Context, arg1 address.Address, arg2 big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketReleaseFunds", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketReleaseFunds indicates an expected call of MarketReleaseFunds.
func (mr *MockIMarketMockRecorder) MarketReleaseFunds(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketReleaseFunds", reflect.TypeOf((*MockIMarket)(nil).MarketReleaseFunds), arg0, arg1, arg2)
}

// MarketReserveFunds mocks base method.
func (m *MockIMarket) MarketReserveFunds(arg0 context.Context, arg1, arg2 address.Address, arg3 big.Int) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketReserveFunds", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketReserveFunds indicates an expected call of MarketReserveFunds.
func (mr *MockIMarketMockRecorder) MarketReserveFunds(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketReserveFunds", reflect.TypeOf((*MockIMarket)(nil).MarketReserveFunds), arg0, arg1, arg2, arg3)
}

// MarketRestartDataTransfer mocks base method.
func (m *MockIMarket) MarketRestartDataTransfer(arg0 context.Context, arg1 datatransfer.TransferID, arg2 peer.ID, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketRestartDataTransfer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketRestartDataTransfer indicates an expected call of MarketRestartDataTransfer.
func (mr *MockIMarketMockRecorder) MarketRestartDataTransfer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketRestartDataTransfer", reflect.TypeOf((*MockIMarket)(nil).MarketRestartDataTransfer), arg0, arg1, arg2, arg3)
}

// MarketSetAsk mocks base method.
func (m *MockIMarket) MarketSetAsk(arg0 context.Context, arg1 address.Address, arg2, arg3 big.Int, arg4 abi.ChainEpoch, arg5, arg6 abi.PaddedPieceSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketSetAsk", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketSetAsk indicates an expected call of MarketSetAsk.
func (mr *MockIMarketMockRecorder) MarketSetAsk(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketSetAsk", reflect.TypeOf((*MockIMarket)(nil).MarketSetAsk), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// MarketSetDataTransferPath mocks base method.
func (m *MockIMarket) MarketSetDataTransferPath(arg0 context.Context, arg1 address.Address, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketSetDataTransferPath", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketSetDataTransferPath indicates an expected call of MarketSetDataTransferPath.
func (mr *MockIMarketMockRecorder) MarketSetDataTransferPath(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketSetDataTransferPath", reflect.TypeOf((*MockIMarket)(nil).MarketSetDataTransferPath), arg0, arg1, arg2)
}

// MarketSetMaxBalanceAddFee mocks base method.
func (m *MockIMarket) MarketSetMaxBalanceAddFee(arg0 context.Context, arg1 address.Address, arg2 types.FIL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketSetMaxBalanceAddFee", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketSetMaxBalanceAddFee indicates an expected call of MarketSetMaxBalanceAddFee.
func (mr *MockIMarketMockRecorder) MarketSetMaxBalanceAddFee(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketSetMaxBalanceAddFee", reflect.TypeOf((*MockIMarket)(nil).MarketSetMaxBalanceAddFee), arg0, arg1, arg2)
}

// MarketSetMaxDealsPerPublishMsg mocks base method.
func (m *MockIMarket) MarketSetMaxDealsPerPublishMsg(arg0 context.Context, arg1 address.Address, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketSetMaxDealsPerPublishMsg", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketSetMaxDealsPerPublishMsg indicates an expected call of MarketSetMaxDealsPerPublishMsg.
func (mr *MockIMarketMockRecorder) MarketSetMaxDealsPerPublishMsg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketSetMaxDealsPerPublishMsg", reflect.TypeOf((*MockIMarket)(nil).MarketSetMaxDealsPerPublishMsg), arg0, arg1, arg2)
}

// MarketSetRetrievalAsk mocks base method.
func (m *MockIMarket) MarketSetRetrievalAsk(arg0 context.Context, arg1 address.Address, arg2 *retrievalmarket.Ask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketSetRetrievalAsk", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarketSetRetrievalAsk indicates an expected call of MarketSetRetrievalAsk.
func (mr *MockIMarketMockRecorder) MarketSetRetrievalAsk(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketSetRetrievalAsk", reflect.TypeOf((*MockIMarket)(nil).MarketSetRetrievalAsk), arg0, arg1, arg2)
}

// MarketWithdraw mocks base method.
func (m *MockIMarket) MarketWithdraw(arg0 context.Context, arg1, arg2 address.Address, arg3 big.Int) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketWithdraw", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketWithdraw indicates an expected call of MarketWithdraw.
func (mr *MockIMarketMockRecorder) MarketWithdraw(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketWithdraw", reflect.TypeOf((*MockIMarket)(nil).MarketWithdraw), arg0, arg1, arg2, arg3)
}

// MessagerGetMessage mocks base method.
func (m *MockIMarket) MessagerGetMessage(arg0 context.Context, arg1 cid.Cid) (*types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagerGetMessage", arg0, arg1)
	ret0, _ := ret[0].(*types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagerGetMessage indicates an expected call of MessagerGetMessage.
func (mr *MockIMarketMockRecorder) MessagerGetMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagerGetMessage", reflect.TypeOf((*MockIMarket)(nil).MessagerGetMessage), arg0, arg1)
}

// MessagerPushMessage mocks base method.
func (m *MockIMarket) MessagerPushMessage(arg0 context.Context, arg1 *types.Message, arg2 *types0.MessageSendSpec) (cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagerPushMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagerPushMessage indicates an expected call of MessagerPushMessage.
func (mr *MockIMarketMockRecorder) MessagerPushMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagerPushMessage", reflect.TypeOf((*MockIMarket)(nil).MessagerPushMessage), arg0, arg1, arg2)
}

// MessagerWaitMessage mocks base method.
func (m *MockIMarket) MessagerWaitMessage(arg0 context.Context, arg1 cid.Cid) (*types0.MsgLookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagerWaitMessage", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgLookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagerWaitMessage indicates an expected call of MessagerWaitMessage.
func (mr *MockIMarketMockRecorder) MessagerWaitMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagerWaitMessage", reflect.TypeOf((*MockIMarket)(nil).MessagerWaitMessage), arg0, arg1)
}

// NetAddrsListen mocks base method.
func (m *MockIMarket) NetAddrsListen(arg0 context.Context) (peer.AddrInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetAddrsListen", arg0)
	ret0, _ := ret[0].(peer.AddrInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetAddrsListen indicates an expected call of NetAddrsListen.
func (mr *MockIMarketMockRecorder) NetAddrsListen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetAddrsListen", reflect.TypeOf((*MockIMarket)(nil).NetAddrsListen), arg0)
}

// OfflineDealImport mocks base method.
func (m *MockIMarket) OfflineDealImport(arg0 context.Context, arg1 market.MinerDeal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfflineDealImport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OfflineDealImport indicates an expected call of OfflineDealImport.
func (mr *MockIMarketMockRecorder) OfflineDealImport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfflineDealImport", reflect.TypeOf((*MockIMarket)(nil).OfflineDealImport), arg0, arg1)
}

// PaychVoucherList mocks base method.
func (m *MockIMarket) PaychVoucherList(arg0 context.Context, arg1 address.Address) ([]*paych.SignedVoucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaychVoucherList", arg0, arg1)
	ret0, _ := ret[0].([]*paych.SignedVoucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaychVoucherList indicates an expected call of PaychVoucherList.
func (mr *MockIMarketMockRecorder) PaychVoucherList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaychVoucherList", reflect.TypeOf((*MockIMarket)(nil).PaychVoucherList), arg0, arg1)
}

// PiecesGetCIDInfo mocks base method.
func (m *MockIMarket) PiecesGetCIDInfo(arg0 context.Context, arg1 cid.Cid) (*piecestore.CIDInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PiecesGetCIDInfo", arg0, arg1)
	ret0, _ := ret[0].(*piecestore.CIDInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PiecesGetCIDInfo indicates an expected call of PiecesGetCIDInfo.
func (mr *MockIMarketMockRecorder) PiecesGetCIDInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PiecesGetCIDInfo", reflect.TypeOf((*MockIMarket)(nil).PiecesGetCIDInfo), arg0, arg1)
}

// PiecesGetPieceInfo mocks base method.
func (m *MockIMarket) PiecesGetPieceInfo(arg0 context.Context, arg1 cid.Cid) (*piecestore.PieceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PiecesGetPieceInfo", arg0, arg1)
	ret0, _ := ret[0].(*piecestore.PieceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PiecesGetPieceInfo indicates an expected call of PiecesGetPieceInfo.
func (mr *MockIMarketMockRecorder) PiecesGetPieceInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PiecesGetPieceInfo", reflect.TypeOf((*MockIMarket)(nil).PiecesGetPieceInfo), arg0, arg1)
}

// PiecesListCidInfos mocks base method.
func (m *MockIMarket) PiecesListCidInfos(arg0 context.Context) ([]cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PiecesListCidInfos", arg0)
	ret0, _ := ret[0].([]cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PiecesListCidInfos indicates an expected call of PiecesListCidInfos.
func (mr *MockIMarketMockRecorder) PiecesListCidInfos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PiecesListCidInfos", reflect.TypeOf((*MockIMarket)(nil).PiecesListCidInfos), arg0)
}

// PiecesListPieces mocks base method.
func (m *MockIMarket) PiecesListPieces(arg0 context.Context) ([]cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PiecesListPieces", arg0)
	ret0, _ := ret[0].([]cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PiecesListPieces indicates an expected call of PiecesListPieces.
func (mr *MockIMarketMockRecorder) PiecesListPieces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PiecesListPieces", reflect.TypeOf((*MockIMarket)(nil).PiecesListPieces), arg0)
}

// RemovePieceStorage mocks base method.
func (m *MockIMarket) RemovePieceStorage(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePieceStorage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePieceStorage indicates an expected call of RemovePieceStorage.
func (mr *MockIMarketMockRecorder) RemovePieceStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePieceStorage", reflect.TypeOf((*MockIMarket)(nil).RemovePieceStorage), arg0, arg1)
}

// ResponseMarketEvent mocks base method.
func (m *MockIMarket) ResponseMarketEvent(arg0 context.Context, arg1 *gateway.ResponseEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseMarketEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResponseMarketEvent indicates an expected call of ResponseMarketEvent.
func (mr *MockIMarketMockRecorder) ResponseMarketEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseMarketEvent", reflect.TypeOf((*MockIMarket)(nil).ResponseMarketEvent), arg0, arg1)
}

// SectorGetExpectedSealDuration mocks base method.
func (m *MockIMarket) SectorGetExpectedSealDuration(arg0 context.Context, arg1 address.Address) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectorGetExpectedSealDuration", arg0, arg1)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SectorGetExpectedSealDuration indicates an expected call of SectorGetExpectedSealDuration.
func (mr *MockIMarketMockRecorder) SectorGetExpectedSealDuration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectorGetExpectedSealDuration", reflect.TypeOf((*MockIMarket)(nil).SectorGetExpectedSealDuration), arg0, arg1)
}

// SectorSetExpectedSealDuration mocks base method.
func (m *MockIMarket) SectorSetExpectedSealDuration(arg0 context.Context, arg1 address.Address, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SectorSetExpectedSealDuration", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SectorSetExpectedSealDuration indicates an expected call of SectorSetExpectedSealDuration.
func (mr *MockIMarketMockRecorder) SectorSetExpectedSealDuration(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SectorSetExpectedSealDuration", reflect.TypeOf((*MockIMarket)(nil).SectorSetExpectedSealDuration), arg0, arg1, arg2)
}

// UpdateDealOnPacking mocks base method.
func (m *MockIMarket) UpdateDealOnPacking(arg0 context.Context, arg1 address.Address, arg2 abi.DealID, arg3 abi.SectorNumber, arg4 abi.PaddedPieceSize) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDealOnPacking", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDealOnPacking indicates an expected call of UpdateDealOnPacking.
func (mr *MockIMarketMockRecorder) UpdateDealOnPacking(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDealOnPacking", reflect.TypeOf((*MockIMarket)(nil).UpdateDealOnPacking), arg0, arg1, arg2, arg3, arg4)
}

// UpdateDealStatus mocks base method.
func (m *MockIMarket) UpdateDealStatus(arg0 context.Context, arg1 address.Address, arg2 abi.DealID, arg3 market.PieceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDealStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDealStatus indicates an expected call of UpdateDealStatus.
func (mr *MockIMarketMockRecorder) UpdateDealStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDealStatus", reflect.TypeOf((*MockIMarket)(nil).UpdateDealStatus), arg0, arg1, arg2, arg3)
}

// UpdateStorageDealStatus mocks base method.
func (m *MockIMarket) UpdateStorageDealStatus(arg0 context.Context, arg1 cid.Cid, arg2 uint64, arg3 market.PieceStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorageDealStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStorageDealStatus indicates an expected call of UpdateStorageDealStatus.
func (mr *MockIMarketMockRecorder) UpdateStorageDealStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorageDealStatus", reflect.TypeOf((*MockIMarket)(nil).UpdateStorageDealStatus), arg0, arg1, arg2, arg3)
}

// Version mocks base method.
func (m *MockIMarket) Version(arg0 context.Context) (types0.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", arg0)
	ret0, _ := ret[0].(types0.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockIMarketMockRecorder) Version(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockIMarket)(nil).Version), arg0)
}
