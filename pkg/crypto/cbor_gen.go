// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package crypto

import (
	"fmt"
	"io"
	"math"

	crypto "github.com/filecoin-project/go-state-types/crypto"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf

var lengthBufKeyInfo = []byte{130}

func (t *KeyInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufKeyInfo); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.PrivateKey ([]uint8) (slice)
	if len(t.PrivateKey) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.PrivateKey was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.PrivateKey))); err != nil {
		return err
	}

	if _, err := w.Write(t.PrivateKey[:]); err != nil {
		return err
	}

	// t.SigType (crypto.SigType) (uint8)
	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.SigType)); err != nil {
		return err
	}
	return nil
}

func (t *KeyInfo) UnmarshalCBOR(r io.Reader) error {
	*t = KeyInfo{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.PrivateKey ([]uint8) (slice)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.PrivateKey: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.PrivateKey = make([]uint8, extra)
	}

	if _, err := io.ReadFull(br, t.PrivateKey[:]); err != nil {
		return err
	}
	// t.SigType (crypto.SigType) (uint8)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint8 field")
	}
	if extra > math.MaxUint8 {
		return fmt.Errorf("integer in input was too large for uint8 field")
	}
	t.SigType = crypto.SigType(extra)
	return nil
}
