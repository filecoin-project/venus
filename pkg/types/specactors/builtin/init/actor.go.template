package init

import (
	"github.com/filecoin-project/venus/pkg/types/specactors"
	"golang.org/x/xerrors"

	"github.com/filecoin-project/go-address"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/filecoin-project/go-state-types/cbor"
	"github.com/ipfs/go-cid"

	"github.com/filecoin-project/venus/pkg/types/specactors/adt"
	"github.com/filecoin-project/venus/pkg/types/specactors/builtin"
	"github.com/filecoin-project/venus/pkg/types/internal"
{{range .versions}}
	builtin{{.}} "github.com/filecoin-project/specs-actors{{import .}}actors/builtin"
{{end}}
)

func init() {
{{range .versions}}
	builtin.RegisterActorState(builtin{{.}}.InitActorCodeID, func(store adt.Store, root cid.Cid) (cbor.Marshaler, error) {
		return load{{.}}(store, root)
	})
{{end}}}

var (
	Address = builtin{{.latestVersion}}.InitActorAddr
	Methods = builtin{{.latestVersion}}.MethodsInit
)

func Load(store adt.Store, act *internal.Actor) (State, error) {
	switch act.Code {
{{range .versions}}
	case builtin{{.}}.InitActorCodeID:
		return load{{.}}(store, act.Head)
{{end}}
	}
	return nil, xerrors.Errorf("unknown actor code %s", act.Code)
}

func MakeState(store adt.Store, av specactors.Version, networkName string) (State, error) {
	switch av {
{{range .versions}}
	case specactors.Version{{.}}:
		return make{{.}}(store, networkName)
{{end}}
}
	return nil, xerrors.Errorf("unknown actor version %d", av)
}

func GetActorCodeID(av specactors.Version) (cid.Cid, error) {
	switch av {
{{range .versions}}
	case specactors.Version{{.}}:
		return builtin{{.}}.InitActorCodeID, nil
{{end}}
	}

	return cid.Undef, xerrors.Errorf("unknown actor version %d", av)
}

type State interface {
	cbor.Marshaler

	ResolveAddress(address address.Address) (address.Address, bool, error)
	MapAddressToNewID(address address.Address) (address.Address, error)
	NetworkName() (string, error)

	ForEachActor(func(id abi.ActorID, address address.Address) error) error

	// Remove exists to support tooling that manipulates state for testing.
	// It should not be used in production code, as init actor entries are
	// immutable.
	Remove(addrs ...address.Address) error

	// Sets the network's name. This should only be used on upgrade/fork.
	SetNetworkName(name string) error

	// Sets the next ID for the init actor. This should only be used for testing.
	SetNextID(id abi.ActorID) error

	// Sets the address map for the init actor. This should only be used for testing.
	SetAddressMap(mcid cid.Cid) error

	AddressMap() (adt.Map, error)
	GetState() interface{}
}
